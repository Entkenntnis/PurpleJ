{"title":"Scribble","summary":"BlueJ Chapter 6","description":"`new DrawDemo()`\n\ndarin verschiedene Methoden","lastUpdated":1728557450871,"output":"display","classes":[{"name":"Canvas","content":"import javax.swing.*;\nimport java.awt.*;\nimport java.awt.geom.*;\n\n/**\n * Class Canvas - a class to allow for simple graphical \n * drawing on a canvas.\n * \n * @author Michael KÃ¶lling (mik)\n * @author Bruce Quig\n *\n * @version 2016.02.29\n */\n\npublic class Canvas\n{\n    private JFrame frame;\n    private CanvasPane canvas;\n    private Graphics2D graphic;\n    private Color backgroundColor;\n    private Image canvasImage;\n\n    /**\n     * Create a Canvas with default height, width and background color \n     * (300, 300, white).\n     * @param title  title to appear in Canvas Frame     \n     */\n    public Canvas(String title)\n    {\n        this(title, 300, 300, Color.white);\n    }\n\n    /**\n     * Create a Canvas with default background color (white).\n     * @param title  title to appear in Canvas Frame\n     * @param width  the desired width for the canvas\n     * @param height  the desired height for the canvas\n     */\n    public Canvas(String title, int width, int height)\n    {\n        this(title, width, height, Color.white);\n    }\n\n    /**\n     * Create a Canvas.\n     * @param title  title to appear in Canvas Frame\n     * @param width  the desired width for the canvas\n     * @param height  the desired height for the canvas\n     * @param bgClour  the desired background color of the canvas\n     */\n    public Canvas(String title, int width, int height, Color bgColor)\n    {\n        frame = new JFrame();\n        canvas = new CanvasPane();\n        frame.setContentPane(canvas);\n        frame.setTitle(title);\n        canvas.setPreferredSize(new Dimension(width, height));\n        backgroundColor = bgColor;\n        frame.pack();\n        setVisible(true);\n    }\n\n    /**\n     * Set the canvas visibility and brings canvas to the front of screen\n     * when made visible. This method can also be used to bring an already\n     * visible canvas to the front of other windows.\n     * @param visible  boolean value representing the desired visibility of\n     * the canvas (true or false) \n     */\n    public void setVisible(boolean visible)\n    {\n        if(graphic == null) {\n            // first time: instantiate the offscreen image and fill it with\n            // the background color\n            Dimension size = canvas.getSize();\n            canvasImage = canvas.createImage(size.width, size.height);\n            graphic = (Graphics2D)canvasImage.getGraphics();\n            graphic.setColor(backgroundColor);\n            graphic.fillRect(0, 0, size.width, size.height);\n            graphic.setColor(Color.black);\n        }\n        frame.setVisible(true);\n    }\n\n    /**\n     * Provide information on visibility of the Canvas.\n     * @return  true if canvas is visible, false otherwise\n     */\n    public boolean isVisible()\n    {\n        return frame.isVisible();\n    }\n\n    /**\n     * Draw the outline of a given shape onto the canvas.\n     * @param  shape  the shape object to be drawn on the canvas\n     */\n    public void draw(Shape shape)\n    {\n        graphic.draw(shape);\n        canvas.repaint();\n    }\n \n    /**\n     * Fill the internal dimensions of a given shape with the current \n     * foreground color of the canvas.\n     * @param  shape  the shape object to be filled \n     */\n    public void fill(Shape shape)\n    {\n        graphic.fill(shape);\n        canvas.repaint();\n    }\n\n    /**\n     * Fill the internal dimensions of the given circle with the current \n     * foreground color of the canvas.\n     * @param  xPos  The x-coordinate of the circle center point\n     * @param  yPos  The y-coordinate of the circle center point\n     * @param  diameter  The diameter of the circle to be drawn\n     */\n    public void fillCircle(int xPos, int yPos, int diameter)\n    {\n        Ellipse2D.Double circle = new Ellipse2D.Double(xPos, yPos, diameter, diameter);\n        fill(circle);\n    }\n\n    /**\n     * Fill the internal dimensions of the given rectangle with the current \n     * foreground color of the canvas. This is a convenience method. A similar \n     * effect can be achieved with the \"fill\" method.\n     */\n    public void fillRectangle(int xPos, int yPos, int width, int height)\n    {\n        fill(new Rectangle(xPos, yPos, width, height));\n    }\n\n    /**\n     * Erase the whole canvas.\n     */\n    public void erase()\n    {\n        Color original = graphic.getColor();\n        graphic.setColor(backgroundColor);\n        Dimension size = canvas.getSize();\n        graphic.fill(new Rectangle(0, 0, size.width, size.height));\n        graphic.setColor(original);\n        canvas.repaint();\n    }\n\n    /**\n     * Erase the internal dimensions of the given circle. This is a \n     * convenience method. A similar effect can be achieved with\n     * the \"erase\" method.\n     */\n    public void eraseCircle(int xPos, int yPos, int diameter)\n    {\n        Ellipse2D.Double circle = new Ellipse2D.Double(xPos, yPos, diameter, diameter);\n        erase(circle);\n    }\n\n    /**\n     * Erase the internal dimensions of the given rectangle. This is a \n     * convenience method. A similar effect can be achieved with\n     * the \"erase\" method.\n     */\n    public void eraseRectangle(int xPos, int yPos, int width, int height)\n    {\n        erase(new Rectangle(xPos, yPos, width, height));\n    }\n\n    /**\n     * Erase a given shape's interior on the screen.\n     * @param  shape  the shape object to be erased \n     */\n    public void erase(Shape shape)\n    {\n        Color original = graphic.getColor();\n        graphic.setColor(backgroundColor);\n        graphic.fill(shape);              // erase by filling background color\n        graphic.setColor(original);\n        canvas.repaint();\n    }\n\n    /**\n     * Erases a given shape's outline on the screen.\n     * @param  shape  the shape object to be erased \n     */\n    public void eraseOutline(Shape shape)\n    {\n        Color original = graphic.getColor();\n        graphic.setColor(backgroundColor);\n        graphic.draw(shape);  // erase by drawing background color\n        graphic.setColor(original);\n        canvas.repaint();\n    }\n\n    /**\n     * Draws an image onto the canvas.\n     * @param  image   the Image object to be displayed \n     * @param  x       x co-ordinate for Image placement \n     * @param  y       y co-ordinate for Image placement \n     * @return  returns boolean value representing whether the image was \n     *          completely loaded \n     */\n    public boolean drawImage(Image image, int x, int y)\n    {\n        boolean result = graphic.drawImage(image, x, y, null);\n        canvas.repaint();\n        return result;\n    }\n\n    /**\n     * Draws a String on the Canvas.\n     * @param  text   the String to be displayed \n     * @param  x      x co-ordinate for text placement \n     * @param  y      y co-ordinate for text placement\n     */\n    public void drawString(String text, int x, int y)\n    {\n        graphic.drawString(text, x, y);   \n        canvas.repaint();\n    }\n\n    /**\n     * Erases a String on the Canvas.\n     * @param  text     the String to be displayed \n     * @param  x        x co-ordinate for text placement \n     * @param  y        y co-ordinate for text placement\n     */\n    public void eraseString(String text, int x, int y)\n    {\n        Color original = graphic.getColor();\n        graphic.setColor(backgroundColor);\n        graphic.drawString(text, x, y);   \n        graphic.setColor(original);\n        canvas.repaint();\n    }\n\n    /**\n     * Draws a line on the Canvas.\n     * @param  x1   x co-ordinate of start of line \n     * @param  y1   y co-ordinate of start of line \n     * @param  x2   x co-ordinate of end of line \n     * @param  y2   y co-ordinate of end of line \n     */\n    public void drawLine(int x1, int y1, int x2, int y2)\n    {\n        graphic.drawLine(x1, y1, x2, y2);   \n        canvas.repaint();\n    }\n\n    /**\n     * Sets the foreground color of the Canvas.\n     * @param  newColor   the new color for the foreground of the Canvas \n     */\n    public void setForegroundColor(Color newColor)\n    {\n        graphic.setColor(newColor);\n    }\n\n    /**\n     * Returns the current color of the foreground.\n     * @return   the color of the foreground of the Canvas \n     */\n    public Color getForegroundColor()\n    {\n        return graphic.getColor();\n    }\n\n    /**\n     * Sets the background color of the Canvas.\n     * @param  newColor   the new color for the background of the Canvas \n     */\n    public void setBackgroundColor(Color newColor)\n    {\n        backgroundColor = newColor;   \n        graphic.setBackground(newColor);\n    }\n\n    /**\n     * Returns the current color of the background\n     * @return   the color of the background of the Canvas \n     */\n    public Color getBackgroundColor()\n    {\n        return backgroundColor;\n    }\n\n    /**\n     * changes the current Font used on the Canvas\n     * @param  newFont   new font to be used for String output\n     */\n    public void setFont(Font newFont)\n    {\n        graphic.setFont(newFont);\n    }\n\n    /**\n     * Returns the current font of the canvas.\n     * @return     the font currently in use\n     **/\n    public Font getFont()\n    {\n        return graphic.getFont();\n    }\n\n    /**\n     * Sets the size of the canvas.\n     * @param  width    new width \n     * @param  height   new height \n     */\n    public void setSize(int width, int height)\n    {\n        canvas.setPreferredSize(new Dimension(width, height));\n        Image oldImage = canvasImage;\n        canvasImage = canvas.createImage(width, height);\n        graphic = (Graphics2D)canvasImage.getGraphics();\n        graphic.setColor(backgroundColor);\n        graphic.fillRect(0, 0, width, height);\n        graphic.drawImage(oldImage, 0, 0, null);\n        frame.pack();\n    }\n\n    /**\n     * Returns the size of the canvas.\n     * @return     The current dimension of the canvas\n     */\n    public Dimension getSize()\n    {\n        return canvas.getSize();\n    }\n\n    /**\n     * Waits for a specified number of milliseconds before finishing.\n     * This provides an easy way to specify a small delay which can be\n     * used when producing animations.\n     * @param  milliseconds  the number \n     */\n    public void wait(int milliseconds)\n    {\n        try\n        {\n            Thread.sleep(milliseconds);\n        } \n        catch (InterruptedException e)\n        {\n            // ignoring exception at the moment\n        }\n    }\n\n    /************************************************************************\n     * Inner class CanvasPane - the actual canvas component contained in the\n     * Canvas frame. This is essentially a JPanel with added capability to\n     * refresh the image drawn on it.\n     */\n    private class CanvasPane extends JPanel\n    {\n        public void paint(Graphics g)\n        {\n            g.drawImage(canvasImage, 0, 0, null);\n        }\n    }\n}\n","position":{"x":297.2133249060098,"y":51.18970259386799}},{"name":"Pen","content":"import java.awt.Color;\nimport java.util.Random;\n\n/**\n * A pen can be used to draw on a canvas. The pen maintains a position, direction, color,\n * and an up/down state. The pen can be moved across the canvas. If the pen is down, it \n * leaves a line on the canvas when moved. (If it is up, it will not draw a line.)\n * \n * @author Michael KÃ¶lling & David J. Barnes\n * @version 2016.02.29\n */\npublic class Pen\n{\n    // constants for randomSquiggle method\n    private static final int SQIGGLE_SIZE = 40;\n    private static final int SQIGGLE_COUNT = 30;\n    \n    private int xPosition;\n    private int yPosition;\n    private int rotation;\n    private Color color;\n    private boolean penDown;\n\n    private Canvas canvas;\n    private Random random;\n\n    /**\n     * Create a new Pen with its own canvas. The pen will create a new canvas for \n     * itself to draw on, and start in the default state (centre of canvas, direction\n     * right, color black, pen down).\n     */\n    public Pen()\n    {\n        this (280, 220, new Canvas(\"My Canvas\", 560, 440));\n    }\n\n    /**\n     * Create a new Pen for a given canvas. The direction is initially 0 (to the right),\n     * the color is black, and the pen is down.\n     *\n     * @param xPos  the initial horizontal coordinate of the pen\n     * @param yPos  the initial vertical coordinate of the pen\n     * @param drawingCanvas  the canvas to draw on\n     */\n    public Pen(int xPos, int yPos, Canvas drawingCanvas)\n    {\n        xPosition = xPos;\n        yPosition = yPos;\n        rotation = 0;\n        penDown = true;\n        color = Color.BLACK;\n        canvas = drawingCanvas;\n        random = new Random();\n    }\n\n    /**\n     * Move the specified distance in the current direction. If the pen is down, \n     * leave a line on the canvas.\n     * \n     * @param distance  The distance to move forward from the current location.\n     */\n    public void move(int distance)\n    {\n        double angle = Math.toRadians(rotation);\n        int newX = (int) Math.round(xPosition + Math.cos(angle) * distance);\n        int newY = (int) Math.round(yPosition + Math.sin(angle) * distance);\n        \n        moveTo(newX, newY);\n    }\n\n    /**\n     * Move to the specified location. If the pen is down, leave a line on the canvas.\n     * \n     * @param x   The x-coordinate to move to.\n     * @param y   The y-coordinate to move to.\n     */\n    public void moveTo(int x, int y)\n    {\n        if (penDown) {\n            canvas.setForegroundColor(color);\n            canvas.drawLine(xPosition, yPosition, x, y);\n        }\n\n        xPosition = x;\n        yPosition = y;\n    }\n\n    /**\n     * Turn the specified amount (out of a 360 degree circle) clockwise from the current \n     * rotation.\n     * \n     * @param degrees  The amount of degrees to turn. (360 is a full circle.)\n     */\n    public void turn(int degrees)\n    {\n        rotation = rotation + degrees;\n    }\n\n    /**\n     * Turn to the specified direction. 0 is right, 90 is down, 180 is left, 270 is up.\n     * \n     * @param angle  The angle to turn to.\n     */\n    public void turnTo(int angle)\n    {\n        rotation = angle;\n    }\n\n    /**\n     * Set the drawing color.\n     * \n     * @param newColor  The color to use for subsequent drawing operations.\n     */\n    public void setColor(Color newColor)\n    {\n        color = newColor;\n    }\n\n    /**\n     * Lift the pen up. Moving afterwards will not leave a line on the canvas.\n     */\n    public void penUp()\n    {\n        penDown = false;\n    }\n\n    /**\n     * Put the pen down. Moving afterwards will leave a line on the canvas.\n     */\n    public void penDown()\n    {\n        penDown = true;\n    }\n\n    /**\n     * Scribble on the canvas in the current color. The size and complexity of the \n     * squiggle produced is defined by the constants SQIGGLE_SIZE and SQIGGLE_COUNT.\n     */\n    public void randomSquiggle()\n    {\n        for (int i=0; i<SQIGGLE_COUNT; i++) {\n            move(random.nextInt(SQIGGLE_SIZE));\n            turn(160 + random.nextInt(40));\n        }\n\n    }\n\n}\n","position":{"x":133.8522750358011,"y":-18.64636467631935}},{"name":"DrawDemo","content":"import java.awt.Color;\nimport java.util.Random;\n\n/**\n * Class DrawDemo - provides some short demonstrations showing how to use the \n * Pen class to create various drawings.\n *\n * @author Michael KÃ¶lling and David J. Barnes\n * @version 2016.02.29\n */\n\npublic class DrawDemo\n{\n    private Canvas myCanvas;\n    private Random random;\n\n    /**\n     * Prepare the drawing demo. Create a fresh canvas and make it visible.\n     */\n    public DrawDemo()\n    {\n        myCanvas = new Canvas(\"Drawing Demo\", 500, 400);\n        random = new Random();\n    }\n\n    /**\n     * Draw a square on the screen.\n     */\n    public void drawSquare()\n    {\n        Pen pen = new Pen(320, 260, myCanvas);\n        pen.setColor(Color.BLUE);\n\n        square(pen);\n    }\n\n    /**\n     * Draw a wheel made of many squares.\n     */\n    public void drawWheel()\n    {\n        Pen pen = new Pen(250, 200, myCanvas);\n        pen.setColor(Color.RED);\n\n        for (int i=0; i<36; i++) {\n            square(pen);\n            pen.turn(10);\n        }\n    }\n\n    /**\n     * Draw a square in the pen's color at the pen's location.\n     */\n    private void square(Pen pen)\n    {\n        for (int i=0; i<4; i++) {\n            pen.move(100);\n            pen.turn(90);\n        }\n    }\n\n    /**\n     * Draw some random squiggles on the screen, in random colors.\n     */\n    public void colorScribble()\n    {\n        Pen pen = new Pen(250, 200, myCanvas);\n\n        for (int i=0; i<10; i++) {\n            // pick a random color\n            int red = random.nextInt(256);\n            int green = random.nextInt(256);\n            int blue = random.nextInt(256);\n            pen.setColor(new Color(red, green, blue));\n            \n            pen.randomSquiggle();\n        }\n    }\n    \n    /**\n     * Clear the screen.\n     */\n    public void clear()\n    {\n        myCanvas.erase();\n    }\n}\n","position":{"x":-32.00972405840517,"y":108.9871178657564}}]}