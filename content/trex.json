{"title":"TRex Game","summary":"Bekannt aus dem Chrome-Browser","description":"Quelle: https://github.com/miazga-git/Java-swing-games/tree/main/TRex_Game\n\nErstelle ein Objekt der Klasse `GameWindow()` und rufe die Methode `startGame()` auf, um das Spiel zu starten.\n\nStarte und springe mit der Leertaste.\n\n(Bonus: Pfeiltaste nach unten ausprobieren)","lastUpdated":1728466860290,"output":"display","classes":[{"name":"Animation","content":"//\n// Source code recreated from a .class file by IntelliJ IDEA\n// (powered by FernFlower decompiler)\n//\n\npackage TRex_GAME;\n\nimport java.awt.image.BufferedImage;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Animation {\n    private List<BufferedImage> list;\n    private long deltaTime;\n    private int currentFrame = 0;\n    private long previousTime;\n\n    public Animation(int deltaTime) {\n        this.deltaTime = (long)deltaTime;\n        this.list = new ArrayList();\n        this.previousTime = 0L;\n    }\n\n    public void updateFrame() {\n        if (System.currentTimeMillis() - this.previousTime >= this.deltaTime) {\n            ++this.currentFrame;\n            if (this.currentFrame >= this.list.size()) {\n                this.currentFrame = 0;\n            }\n\n            this.previousTime = System.currentTimeMillis();\n        }\n\n    }\n\n    public void addFrame(BufferedImage image) {\n        this.list.add(image);\n    }\n\n    public BufferedImage getFrame() {\n        return (BufferedImage)this.list.get(this.currentFrame);\n    }\n}","position":{"x":14.68274288634484,"y":-157.52724125059495}},{"name":"Cactus","content":"\nimport java.awt.Color;\nimport java.awt.Graphics;\nimport java.awt.Rectangle;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.ImageObserver;\n\npublic class Cactus extends Enemy {\n    public static final int Y_LAND = 125;\n    private int posX;\n    private int width;\n    private int height;\n    private BufferedImage image;\n    private MainCharacter mainCharacter;\n    private Rectangle rectBound;\n\n    public Cactus(MainCharacter mainCharacter, int posX, int width, int height, BufferedImage image) {\n        this.posX = posX;\n        this.width = width;\n        this.height = height;\n        this.image = image;\n        this.mainCharacter = mainCharacter;\n        this.rectBound = new Rectangle();\n    }\n\n    public void update() {\n        this.posX = (int)((float)this.posX - this.mainCharacter.getSpeedX());\n    }\n\n    public void draw(Graphics g) {\n        g.drawImage(this.image, this.posX, 125 - this.image.getHeight(), (ImageObserver)null);\n        g.setColor(Color.red);\n    }\n\n    public Rectangle getBound() {\n        this.rectBound = new Rectangle();\n        this.rectBound.x = this.posX + (this.image.getWidth() - this.width) / 2;\n        this.rectBound.y = 125 - this.image.getHeight() + (this.image.getHeight() - this.height) / 2;\n        this.rectBound.width = this.width;\n        this.rectBound.height = this.height;\n        return this.rectBound;\n    }\n\n    public boolean isOutOfScreen() {\n        return this.posX < -this.image.getWidth();\n    }\n}","position":{"x":250.94373655629585,"y":-180.3427456735878}},{"name":"Clouds","content":"\nimport java.awt.Graphics;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.ImageObserver;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class Clouds {\n    private List<Clouds.ImageCloud> listCloud;\n    private BufferedImage cloud;\n    private MainCharacter mainCharacter;\n\n    public Clouds(int width, MainCharacter mainCharacter) {\n        this.mainCharacter = mainCharacter;\n        this.cloud = Resource.getResouceImage(\"cloud.png\");\n        this.listCloud = new ArrayList();\n        Clouds.ImageCloud imageCloud = new Clouds.ImageCloud();\n        imageCloud.posX = 0.0F;\n        imageCloud.posY = 30;\n        this.listCloud.add(imageCloud);\n        imageCloud = new Clouds.ImageCloud();\n        imageCloud.posX = 150.0F;\n        imageCloud.posY = 40;\n        this.listCloud.add(imageCloud);\n        imageCloud = new Clouds.ImageCloud();\n        imageCloud.posX = 300.0F;\n        imageCloud.posY = 50;\n        this.listCloud.add(imageCloud);\n        imageCloud = new Clouds.ImageCloud();\n        imageCloud.posX = 450.0F;\n        imageCloud.posY = 20;\n        this.listCloud.add(imageCloud);\n        imageCloud = new Clouds.ImageCloud();\n        imageCloud.posX = 600.0F;\n        imageCloud.posY = 60;\n        this.listCloud.add(imageCloud);\n    }\n\n    public void update() {\n        Iterator<Clouds.ImageCloud> itr = this.listCloud.iterator();\n        Clouds.ImageCloud firstElement = (Clouds.ImageCloud)itr.next();\n\n        Clouds.ImageCloud element;\n        for(firstElement.posX -= this.mainCharacter.getSpeedX() / 8.0F; itr.hasNext(); element.posX -= this.mainCharacter.getSpeedX() / 8.0F) {\n            element = (Clouds.ImageCloud)itr.next();\n        }\n\n        if (firstElement.posX < (float)(-this.cloud.getWidth())) {\n            this.listCloud.remove(firstElement);\n            firstElement.posX = 600.0F;\n            this.listCloud.add(firstElement);\n        }\n\n    }\n\n    public void draw(Graphics g) {\n        Iterator var2 = this.listCloud.iterator();\n\n        while(var2.hasNext()) {\n            Clouds.ImageCloud imgLand = (Clouds.ImageCloud)var2.next();\n            g.drawImage(this.cloud, (int)imgLand.posX, imgLand.posY, (ImageObserver)null);\n        }\n\n    }\n\n    private class ImageCloud {\n        float posX;\n        int posY;\n\n        private ImageCloud() {\n        }\n    }\n}","position":{"x":506.0140704825654,"y":-224.91653560532802}},{"name":"EnemiesManager","content":"\nimport java.awt.Graphics;\nimport java.awt.image.BufferedImage;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Random;\n\npublic class EnemiesManager {\n    private BufferedImage cactus1 = Resource.getResouceImage(\"cactus1.png\");\n    private BufferedImage cactus2 = Resource.getResouceImage(\"cactus2.png\");\n    private Random rand = new Random();\n    private List<Enemy> enemies = new ArrayList();\n    private MainCharacter mainCharacter;\n\n    public EnemiesManager(MainCharacter mainCharacter) {\n        this.mainCharacter = mainCharacter;\n        this.enemies.add(this.createEnemy());\n    }\n\n    public void update() {\n        Iterator var1 = this.enemies.iterator();\n\n        while(var1.hasNext()) {\n            Enemy e = (Enemy)var1.next();\n            e.update();\n        }\n\n        Enemy enemy = (Enemy)this.enemies.get(0);\n        if (enemy.isOutOfScreen()) {\n            this.mainCharacter.upScore();\n            this.enemies.clear();\n            this.enemies.add(this.createEnemy());\n        }\n\n    }\n\n    public void draw(Graphics g) {\n        Iterator var2 = this.enemies.iterator();\n\n        while(var2.hasNext()) {\n            Enemy e = (Enemy)var2.next();\n            e.draw(g);\n        }\n\n    }\n\n    private Enemy createEnemy() {\n        int type = this.rand.nextInt(2);\n        return type == 0 ? new Cactus(this.mainCharacter, 800, this.cactus1.getWidth() - 10, this.cactus1.getHeight() - 10, this.cactus1) : new Cactus(this.mainCharacter, 800, this.cactus2.getWidth() - 10, this.cactus2.getHeight() - 10, this.cactus2);\n    }\n\n    public boolean isCollision() {\n        Iterator var1 = this.enemies.iterator();\n\n        Enemy e;\n        do {\n            if (!var1.hasNext()) {\n                return false;\n            }\n\n            e = (Enemy)var1.next();\n        } while(!this.mainCharacter.getBound().intersects(e.getBound()));\n\n        return true;\n    }\n\n    public void reset() {\n        this.enemies.clear();\n        this.enemies.add(this.createEnemy());\n    }\n}","position":{"x":90.31052518181873,"y":173.37276680428386}},{"name":"Enemy","content":"\nimport java.awt.Graphics;\nimport java.awt.Rectangle;\n\npublic abstract class Enemy {\n    public Enemy() {\n    }\n\n    public abstract void update();\n\n    public abstract void draw(Graphics var1);\n\n    public abstract Rectangle getBound();\n\n    public abstract boolean isOutOfScreen();\n}","position":{"x":249.2245638612971,"y":170.93275946260565}},{"name":"GameScreen","content":"\nimport java.awt.Color;\nimport java.awt.Graphics;\nimport java.awt.event.KeyEvent;\nimport java.awt.event.KeyListener;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.ImageObserver;\nimport javax.swing.JPanel;\n\npublic class GameScreen extends JPanel implements Runnable, KeyListener {\n    private static final int START_GAME_STATE = 0;\n    private static final int GAME_PLAYING_STATE = 1;\n    private static final int GAME_OVER_STATE = 2;\n    private Land land;\n    private MainCharacter mainCharacter = new MainCharacter();\n    private EnemiesManager enemiesManager;\n    private Clouds clouds;\n    private Thread thread;\n    private boolean isKeyPressed;\n    private int gameState = 0;\n    private BufferedImage replayButtonImage;\n    private BufferedImage gameOverButtonImage;\n\n    public GameScreen() {\n        this.land = new Land(600, this.mainCharacter);\n        this.mainCharacter.setSpeedX(4);\n        this.replayButtonImage = Resource.getResouceImage(\"replay_button.png\");\n        this.gameOverButtonImage = Resource.getResouceImage(\"gameover_text.png\");\n        this.enemiesManager = new EnemiesManager(this.mainCharacter);\n        this.clouds = new Clouds(600, this.mainCharacter);\n    }\n\n    public void startGame() {\n        this.thread = new Thread(this);\n        this.thread.start();\n    }\n\n    public void gameUpdate() {\n        if (this.gameState == 1) {\n            this.clouds.update();\n            this.land.update();\n            this.mainCharacter.update();\n            this.enemiesManager.update();\n            if (this.enemiesManager.isCollision()) {\n                this.mainCharacter.playDeadSound();\n                this.gameState = 2;\n                mainCharacter.score=0;\n                this.mainCharacter.dead(true);\n            }\n        }\n\n    }\n\n    public void paint(Graphics g) {\n        g.setColor(Color.decode(\"#f7f7f7\"));\n        g.fillRect(0, 0, this.getWidth(), this.getHeight());\n        switch(this.gameState) {\n            case 0:\n                this.mainCharacter.draw(g);\n                break;\n            case 1:\n            case 2:\n\n                this.clouds.draw(g);\n                this.land.draw(g);\n                this.enemiesManager.draw(g);\n                this.mainCharacter.draw(g);\n                g.setColor(Color.BLACK);\n                g.drawString(\"HI \" + this.mainCharacter.score, 500, 20);\n                if (this.gameState == 2) {\n                    g.drawImage(this.gameOverButtonImage, 200, 30, (ImageObserver)null);\n                    g.drawImage(this.replayButtonImage, 283, 50, (ImageObserver)null);\n                }\n        }\n\n    }\n\n    public void run() {\n        int fps = 100;\n        long msPerFrame = (long)(1000000000 / fps);\n        long lastTime = 0L;\n        long var12 = 0L;\n\n        while(true) {\n            while(true) {\n                this.gameUpdate();\n                this.repaint();\n                long endProcessGame = System.nanoTime();\n                long elapsed = lastTime + msPerFrame - System.nanoTime();\n                int msSleep = (int)(elapsed / 1000000L);\n                int nanoSleep = (int)(elapsed % 1000000L);\n                if (msSleep <= 0) {\n                    lastTime = System.nanoTime();\n                } else {\n                    try {\n                        Thread.sleep((long)msSleep, nanoSleep);\n                    } catch (InterruptedException var15) {\n                        var15.printStackTrace();\n                    }\n\n                    lastTime = System.nanoTime();\n                }\n            }\n        }\n    }\n\n    public void keyPressed(KeyEvent e) {\n        if (!this.isKeyPressed) {\n            this.isKeyPressed = true;\n            switch(this.gameState) {\n                case 0:\n                    if (e.getKeyCode() == 32) {\n                        this.gameState = 1;\n                    }\n                    break;\n                case 1:\n                    if (e.getKeyCode() == 32) {\n                        this.mainCharacter.jump();\n                    } else if (e.getKeyCode() == 40) {\n                        this.mainCharacter.down(true);\n                    }\n                    break;\n                case 2:\n                    if (e.getKeyCode() == 32) {\n                        this.gameState = 1;\n                        this.resetGame();\n                    }\n            }\n        }\n\n    }\n\n    public void keyReleased(KeyEvent e) {\n        this.isKeyPressed = false;\n        if (this.gameState == 1 && e.getKeyCode() == 40) {\n            this.mainCharacter.down(false);\n        }\n\n    }\n\n    public void keyTyped(KeyEvent e) {\n    }\n\n    private void resetGame() {\n        this.enemiesManager.reset();\n        this.mainCharacter.dead(false);\n        this.mainCharacter.reset();\n    }\n}","position":{"x":30.591325236883506,"y":11.919324261607926}},{"name":"GameWindow","content":"\nimport javax.swing.JFrame;\n\npublic class GameWindow extends JFrame {\n    public static final int SCREEN_WIDTH = 600;\n    private GameScreen gameScreen;\n\n    public GameWindow() {\n        super(\"Java T-Rex game\");\n        this.setSize(600, 175);\n        this.setLocation(400, 200);\n        this.setDefaultCloseOperation(3);\n        this.setResizable(false);\n        this.gameScreen = new GameScreen();\n        this.getContentPane().add(this.gameScreen);\n        this.addKeyListener(this.gameScreen);\n    }\n\n    public void startGame() {\n        this.setVisible(true);\n        this.gameScreen.startGame();\n    }\n\n    public static void main(String[] args) {\n        (new GameWindow()).startGame();\n    }\n}","position":{"x":-78.80371866909375,"y":171.58855033919815}},{"name":"Land","content":"\nimport java.awt.Graphics;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.ImageObserver;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Random;\n\npublic class Land {\n    public static final int LAND_POSY = 103;\n    private List<Land.ImageLand> listLand;\n    private BufferedImage land1;\n    private BufferedImage land2;\n    private BufferedImage land3;\n    private MainCharacter mainCharacter;\n\n    public Land(int width, MainCharacter mainCharacter) {\n        this.mainCharacter = mainCharacter;\n        this.land1 = Resource.getResouceImage(\"land1.png\");\n        this.land2 = Resource.getResouceImage(\"land2.png\");\n        this.land3 = Resource.getResouceImage(\"land3.png\");\n        int numberOfImageLand = width / this.land1.getWidth() + 2;\n        this.listLand = new ArrayList();\n\n        for(int i = 0; i < numberOfImageLand; ++i) {\n            Land.ImageLand imageLand = new Land.ImageLand();\n            imageLand.posX = (float)(i * this.land1.getWidth());\n            this.setImageLand(imageLand);\n            this.listLand.add(imageLand);\n        }\n\n    }\n\n    public void update() {\n        Iterator<Land.ImageLand> itr = this.listLand.iterator();\n        Land.ImageLand firstElement = (Land.ImageLand)itr.next();\n        firstElement.posX -= this.mainCharacter.getSpeedX();\n\n        float previousPosX;\n        Land.ImageLand element;\n        for(previousPosX = firstElement.posX; itr.hasNext(); previousPosX = element.posX) {\n            element = (Land.ImageLand)itr.next();\n            element.posX = previousPosX + (float)this.land1.getWidth();\n        }\n\n        if (firstElement.posX < (float)(-this.land1.getWidth())) {\n            this.listLand.remove(firstElement);\n            firstElement.posX = previousPosX + (float)this.land1.getWidth();\n            this.setImageLand(firstElement);\n            this.listLand.add(firstElement);\n        }\n\n    }\n\n    private void setImageLand(Land.ImageLand imgLand) {\n        int typeLand = this.getTypeOfLand();\n        if (typeLand == 1) {\n            imgLand.image = this.land1;\n        } else if (typeLand == 3) {\n            imgLand.image = this.land3;\n        } else {\n            imgLand.image = this.land2;\n        }\n\n    }\n\n    public void draw(Graphics g) {\n        Iterator var2 = this.listLand.iterator();\n\n        while(var2.hasNext()) {\n            Land.ImageLand imgLand = (Land.ImageLand)var2.next();\n            g.drawImage(imgLand.image, (int)imgLand.posX, 103, (ImageObserver)null);\n        }\n\n    }\n\n    private int getTypeOfLand() {\n        Random rand = new Random();\n        int type = rand.nextInt(10);\n        if (type == 1) {\n            return 1;\n        } else {\n            return type == 9 ? 3 : 2;\n        }\n    }\n\n    private class ImageLand {\n        float posX;\n        BufferedImage image;\n\n        private ImageLand() {\n        }\n    }\n}","position":{"x":413.61291744608366,"y":161.5949160108487}},{"name":"MainCharacter","content":"\nimport java.applet.Applet;\nimport java.applet.AudioClip;\nimport java.awt.Graphics;\nimport java.awt.Rectangle;\nimport java.awt.image.BufferedImage;\nimport java.awt.image.ImageObserver;\nimport java.net.MalformedURLException;\nimport java.net.URL;\n\npublic class MainCharacter {\n    public static final int LAND_POSY = 80;\n    public static final float GRAVITY = 0.4F;\n    private static final int NORMAL_RUN = 0;\n    private static final int JUMPING = 1;\n    private static final int DOWN_RUN = 2;\n    private static final int DEATH = 3;\n    private float posY = 80.0F;\n    private float posX = 50.0F;\n    private float speedX;\n    private float speedY;\n    private Rectangle rectBound = new Rectangle();\n    public int score = 0;\n    private int state = 0;\n    private TRex_GAME.Animation normalRunAnim = new TRex_GAME.Animation(90);\n    private BufferedImage jumping;\n    private TRex_GAME.Animation downRunAnim;\n    private BufferedImage deathImage;\n    private AudioClip jumpSound;\n    private AudioClip deadSound;\n    private AudioClip scoreUpSound;\n\n    public MainCharacter() {\n        this.normalRunAnim.addFrame(Resource.getResouceImage(\"main-character1.png\"));\n        this.normalRunAnim.addFrame(Resource.getResouceImage(\"main-character2.png\"));\n        this.jumping = Resource.getResouceImage(\"main-character3.png\");\n        this.downRunAnim = new TRex_GAME.Animation(90);\n        this.downRunAnim.addFrame(Resource.getResouceImage(\"main-character5.png\"));\n        this.downRunAnim.addFrame(Resource.getResouceImage(\"main-character6.png\"));\n        this.deathImage = Resource.getResouceImage(\"main-character4.png\");\n\n        try {\n            this.jumpSound = Applet.newAudioClip(new URL(\"file\", \"\", \"/app/tmp_assets/jump.wav\"));\n            this.deadSound = Applet.newAudioClip(new URL(\"file\", \"\", \"/app/tmp_assets/dead.wav\"));\n            this.scoreUpSound = Applet.newAudioClip(new URL(\"file\", \"\", \"/app/tmp_assets/scoreup.wav\"));\n        } catch (MalformedURLException var2) {\n            var2.printStackTrace();\n        }\n\n    }\n\n    public float getSpeedX() {\n        return this.speedX;\n    }\n\n    public void setSpeedX(int speedX) {\n        this.speedX = (float)speedX;\n    }\n\n    public void draw(Graphics g) {\n        switch(this.state) {\n            case 0:\n                g.drawImage(this.normalRunAnim.getFrame(), (int)this.posX, (int)this.posY, (ImageObserver)null);\n                break;\n            case 1:\n                g.drawImage(this.jumping, (int)this.posX, (int)this.posY, (ImageObserver)null);\n                break;\n            case 2:\n                g.drawImage(this.downRunAnim.getFrame(), (int)this.posX, (int)(this.posY + 20.0F), (ImageObserver)null);\n                break;\n            case 3:\n                g.drawImage(this.deathImage, (int)this.posX, (int)this.posY, (ImageObserver)null);\n        }\n\n    }\n\n    public void update() {\n        this.normalRunAnim.updateFrame();\n        this.downRunAnim.updateFrame();\n        if (this.posY >= 80.0F) {\n            this.posY = 80.0F;\n            if (this.state != 2) {\n                this.state = 0;\n            }\n        } else {\n            this.speedY += 0.4F;\n            this.posY += this.speedY;\n        }\n\n    }\n\n    public void jump() {\n        if (this.posY >= 80.0F) {\n            if (this.jumpSound != null) {\n                this.jumpSound.play();\n            }\n\n            this.speedY = -7.5F;\n            this.posY += this.speedY;\n            this.state = 1;\n        }\n\n    }\n\n    public void down(boolean isDown) {\n        if (this.state != 1) {\n            if (isDown) {\n                this.state = 2;\n            } else {\n                this.state = 0;\n            }\n\n        }\n    }\n\n    public Rectangle getBound() {\n        this.rectBound = new Rectangle();\n        if (this.state == 2) {\n            this.rectBound.x = (int)this.posX + 5;\n            this.rectBound.y = (int)this.posY + 20;\n            this.rectBound.width = this.downRunAnim.getFrame().getWidth() - 10;\n            this.rectBound.height = this.downRunAnim.getFrame().getHeight();\n        } else {\n            this.rectBound.x = (int)this.posX + 5;\n            this.rectBound.y = (int)this.posY;\n            this.rectBound.width = this.normalRunAnim.getFrame().getWidth() - 10;\n            this.rectBound.height = this.normalRunAnim.getFrame().getHeight();\n        }\n\n        return this.rectBound;\n    }\n\n    public void dead(boolean isDeath) {\n        if (isDeath) {\n            this.state = 3;\n        } else {\n            this.state = 0;\n        }\n\n    }\n\n    public void reset() {\n        this.posY = 80.0F;\n    }\n\n    public void playDeadSound() {\n        this.deadSound.play();\n    }\n\n    public void upScore() {\n        this.score += 20;\n        if (this.score % 100 == 0) {\n            this.scoreUpSound.play();\n        }\n\n    }\n}","position":{"x":400.01759679227905,"y":-55.12659655529515}},{"name":"Resource","content":"\nimport java.awt.image.BufferedImage;\nimport java.io.File;\nimport java.io.IOException;\nimport javax.imageio.ImageIO;\n\npublic class Resource {\n    public Resource() {\n    }\n\n    public static BufferedImage getResouceImage(String path) {\n        BufferedImage img = null;\n\n        try {\n            img = ImageIO.read(new File(\"/app/tmp_assets/\" + path));\n        } catch (IOException var3) {\n            var3.printStackTrace();\n        }\n\n        return img;\n    }\n}","position":{"x":564.3297539535035,"y":81.2276572578625}}]}