{"title":"Calculator","summary":"BlueJ Chapter 9","description":"`new Calculator()`","lastUpdated":1728739123554,"output":"display","classes":[{"name":"CalcEngine","content":"/**\n * The main part of the calculator doing the calculations.\n * \n * @author  David J. Barnes and Michael Kölling \n * @version 2016.02.29\n */\npublic class CalcEngine\n{\n    // The calculator's state is maintained in three fields:\n    //     buildingDisplayValue, haveLeftOperand, and lastOperator.\n    \n    // Are we already building a value in the display, or will the\n    // next digit be the first of a new one?\n    private boolean buildingDisplayValue;\n    // Has a left operand already been entered (or calculated)?\n    private boolean haveLeftOperand;\n    // The most recent operator that was entered.\n    private char lastOperator;\n\n    // The current value (to be) shown in the display.\n    private int displayValue;\n    // The value of an existing left operand.\n    private int leftOperand;\n\n    /**\n     * Create a CalcEngine.\n     */\n    public CalcEngine()\n    {\n        clear();\n    }\n\n    /**\n     * @return The value that should currently be displayed\n     * on the calculator display.\n     */\n    public int getDisplayValue()\n    {\n        return displayValue;\n    }\n\n    /**\n     * A number button was pressed.\n     * Either start a new operand, or incorporate this number as\n     * the least significant digit of an existing one.\n     * @param number The number pressed on the calculator.\n     */\n    public void numberPressed(int number)\n    {\n        if(buildingDisplayValue) {\n            // Incorporate this digit.\n            displayValue = displayValue*10 + number;\n        }\n        else {\n            // Start building a new number.\n            displayValue = number;\n            buildingDisplayValue = true;\n        }\n    }\n\n    /**\n     * The 'plus' button was pressed. \n     */\n    public void plus()\n    {\n        applyOperator('+');\n    }\n\n    /**\n     * The 'minus' button was pressed.\n     */\n    public void minus()\n    {\n        applyOperator('-');\n    }\n    \n    /**\n     * The '=' button was pressed.\n     */\n    public void equals()\n    {\n        // This should completes the building of a second operand,\n        // so ensure that we really have a left operand, an operator\n        // and a right operand.\n        if(haveLeftOperand &&\n                lastOperator != '?' &&\n                buildingDisplayValue) {\n            calculateResult();\n            lastOperator = '?';\n            buildingDisplayValue = false;\n        }\n        else {\n            keySequenceError();\n        }\n    }\n\n    /**\n     * The 'C' (clear) button was pressed.\n     * Reset everything to a starting state.\n     */\n    public void clear()\n    {\n        lastOperator = '?';\n        haveLeftOperand = false;\n        buildingDisplayValue = false;\n        displayValue = 0;\n    }\n\n    /**\n     * @return The title of this calculation engine.\n     */\n    public String getTitle()\n    {\n        return \"Java Calculator\";\n    }\n\n    /**\n     * @return The author of this engine.\n     */\n    public String getAuthor()\n    {\n        return \"David J. Barnes and Michael Kölling\";\n    }\n\n    /**\n     * @return The version number of this engine.\n     */\n    public String getVersion()\n    {\n       return \"Version 1.0\";\n    }\n\n    /**\n     * Combine leftOperand, lastOperator, and the\n     * current display value.\n     * The result becomes both the leftOperand and\n     * the new display value.\n     */\n    private void calculateResult()\n    {\n        switch(lastOperator) {\n            case '+':\n                displayValue = leftOperand + displayValue;\n                haveLeftOperand = true;\n                leftOperand = displayValue;\n                break;\n            case '-':\n                displayValue = leftOperand - displayValue;\n                haveLeftOperand = true;\n                leftOperand = displayValue;\n                break;\n            default:\n                keySequenceError();\n                break;\n        }\n    }\n    \n    /**\n     * Apply an operator.\n     * @param operator The operator to apply.\n     */\n    private void applyOperator(char operator)\n    {\n        // If we are not in the process of building a new operand\n        // then it is an error, unless we have just calculated a\n        // result using '='.\n        if(!buildingDisplayValue &&\n                    !(haveLeftOperand && lastOperator == '?')) {\n            keySequenceError();\n            return;\n        }\n\n        if(lastOperator != '?') {\n            // First apply the previous operator.\n            calculateResult();\n        }\n        else {\n            // The displayValue now becomes the left operand of this\n            // new operator.\n            haveLeftOperand = true;\n            leftOperand = displayValue;\n        }\n        lastOperator = operator;\n        buildingDisplayValue = false;\n    }\n\n    /**\n     * Report an error in the sequence of keys that was pressed.\n     */\n    private void keySequenceError()\n    {\n        System.out.println(\"A key sequence error has occurred.\");\n        // Reset everything.\n        clear();\n    }\n}\n","position":{"x":354.35991627153794,"y":182.50900577302724}},{"name":"Calculator","content":"/**\n * The main class of a simple calculator. Create one of these and you'll\n * get the calculator on screen.\n * \n * @author: Michael Kölling and David J. Barnes\n * @version 2016.02.29\n */\npublic class Calculator\n{\n    private CalcEngine engine;\n    private UserInterface gui;\n\n    /**\n     * Create a new calculator and show it.\n     */\n    public Calculator()\n    {\n        engine = new CalcEngine();\n        gui = new UserInterface(engine);\n    }\n\n    /**\n     * In case the window was closed, show it again.\n     */\n    public void show()\n    {\n        gui.setVisible(true);\n    }\n}\n","position":{"x":26.016688525663557,"y":157.69093478049427}},{"name":"UserInterface","content":"import java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\nimport javax.swing.border.*;\n\n/**\n * A graphical user interface for the calculator. No calculation is being\n * done here. This class is responsible just for putting up the display on \n * screen. It then refers to the \"CalcEngine\" to do all the real work.\n * \n * @author: Michael Kölling and David J. Barnes\n * @version 2016.02.29\n */\npublic class UserInterface\n{\n    private CalcEngine calc;\n    private boolean showingAuthor;\n\n    private JFrame frame;\n    private JTextField display;\n    private JLabel status;\n\n    /**\n     * Create a user interface.\n     * @param engine The calculator engine.\n     */\n    public UserInterface(CalcEngine engine)\n    {\n        calc = engine;\n        showingAuthor = true;\n        makeFrame();\n        frame.setVisible(true);\n    }\n\n    /**\n     * Set the visibility of the interface.\n     * @param visible true if the interface is to be made visible, false otherwise.\n     */\n    public void setVisible(boolean visible)\n    {\n        frame.setVisible(visible);\n    }\n\n    /**\n     * Make the frame for the user interface.\n     */\n    private void makeFrame()\n    {\n        frame = new JFrame(calc.getTitle());\n        \n        JPanel contentPane = (JPanel)frame.getContentPane();\n        contentPane.setLayout(new BorderLayout(8, 8));\n        contentPane.setBorder(new EmptyBorder( 10, 10, 10, 10));\n\n        display = new JTextField();\n        contentPane.add(display, BorderLayout.NORTH);\n\n        JPanel buttonPanel = new JPanel(new GridLayout(4, 4));\n            addNumberButton(buttonPanel, 7);\n            addNumberButton(buttonPanel, 8);\n            addNumberButton(buttonPanel, 9);\n            addButton(buttonPanel, \"C\", () -> calc.clear());\n            \n            addNumberButton(buttonPanel, 4);\n            addNumberButton(buttonPanel, 5);\n            addNumberButton(buttonPanel, 6);\n            addButton(buttonPanel, \"?\", () -> showInfo());\n            \n            addNumberButton(buttonPanel, 1);\n            addNumberButton(buttonPanel, 2);\n            addNumberButton(buttonPanel, 3);\n            buttonPanel.add(new JLabel(\" \"));\n            \n            addNumberButton(buttonPanel, 0);\n            addButton(buttonPanel, \"+\", () -> calc.plus());\n            addButton(buttonPanel, \"-\", () -> calc.minus());\n            addButton(buttonPanel, \"=\", () -> calc.equals());\n            \n        contentPane.add(buttonPanel, BorderLayout.CENTER);\n\n        status = new JLabel(calc.getAuthor());\n        contentPane.add(status, BorderLayout.SOUTH);\n\n        frame.pack();\n    }\n\n    /**\n     * Add a button to the button panel.\n     * @param panel The panel to receive the button.\n     * @param buttonText The text for the button.\n     * @param action Action to be taken by the button.\n     */\n    private void addButton(Container panel, String buttonText, ButtonAction action)\n    {\n        JButton button = new JButton(buttonText);\n        button.addActionListener(e -> { action.act(); redisplay(); });\n        panel.add(button);\n    }\n\n    /**\n     * Add a number button to the button panel.\n     * @param panel The panel to receive the button.\n     * @param digit The single digit on the button.\n     */\n    private void addNumberButton(Container panel, int digit)\n    {\n        addButton(panel, \"\" + digit, () -> calc.numberPressed(digit));\n    }\n\n    /**\n     * Update the interface display to show the current value of the \n     * calculator.\n     */\n    private void redisplay()\n    {\n        display.setText(\"\" + calc.getDisplayValue());\n    }\n\n    /**\n     * Toggle the info display in the calculator's status area between the\n     * author and version information.\n     */\n    private void showInfo()\n    {\n        if(showingAuthor)\n            status.setText(calc.getVersion());\n        else\n            status.setText(calc.getAuthor());\n\n        showingAuthor = !showingAuthor;\n    }\n    \n    /**\n     * Functional interface for button actions.\n     */\n    @FunctionalInterface\n    private interface ButtonAction\n    {\n        /**\n         * Act on a button press.\n         */\n        public void act();\n    }\n}\n","position":{"x":187.28083882411988,"y":59.034802532877805}}]}