{"title":"Animal Monitoring","summary":"BlueJ Chapter 5","description":"`new AnimalMonitor()`\n\n`addSightings(\"sightings.csv\")`\n\n`printList()`","lastUpdated":1728557043475,"output":"terminal","classes":[{"name":"SightingReader","content":"import java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.ArrayList;\nimport java.util.Optional;\nimport java.util.function.Function;\nimport java.util.stream.Collectors;\n\n/**\n * A class to read CSV-style records of animal sighting reports.\n * \n * @author David J. Barnes and Michael Kölling\n * @version 2016.02.29\n */\npublic class SightingReader\n{\n    // How many fields are expected.\n    private static final int NUMBER_OF_FIELDS = 5;\n    // Index values for the fields in each record.\n    private static final int SPOTTER = 0,\n                             ANIMAL = 1,\n                             COUNT = 2,\n                             AREA = 3,\n                             PERIOD = 4;\n    \n    /**\n     * Create a SightingReader.\n     */\n    public SightingReader()\n    {\n    }\n    \n    /**\n     * Read sightings in CSV format from the given file.\n     * Return an ArrayList of Sighting objects created from\n     * the information in the file.\n     * \n     * @param filename The file to be read - should be in CSV format.\n     * @return A list of Sightings.\n     */\n    public ArrayList<Sighting> getSightings(String filename)\n    {\n        // Create a Sighting from a CSV input line.\n        Function<String, Sighting> createSighting = \n            record -> {\n                           String[] parts = record.split(\",\");\n                           if(parts.length == NUMBER_OF_FIELDS) {\n                               try {\n                                   int spotter = Integer.parseInt(parts[SPOTTER].trim());\n                                   String animal = parts[ANIMAL].trim();\n                                   int count = Integer.parseInt(parts[COUNT].trim());\n                                   int area = Integer.parseInt(parts[AREA].trim());\n                                   int period = Integer.parseInt(parts[PERIOD].trim());\n                                   return new Sighting(animal, spotter, count, area, period);\n                               }\n                               catch(NumberFormatException e) {\n                                   System.out.println(\"Sighting record has a malformed integer: \" + record);\n                                   return null;\n                               }\n                           }\n                           else {\n                               System.out.println(\"Sighting record has the wrong number of fields: \" + record);\n                               return null;\n                           }\n                       };\n        ArrayList<Sighting> sightings;\n        try {\n            sightings = Files.lines(Paths.get(filename))\n                             .filter(record -> record.length() > 0 && record.charAt(0) != '#')\n                             .map(createSighting)\n                             .filter(sighting -> sighting != null)\n                             .collect(Collectors.toCollection(ArrayList::new));\n        }\n        catch(IOException e) {\n            System.out.println(\"Unable to open \" + filename);\n            sightings = new ArrayList<>();\n        }\n        return sightings;\n    }\n    \n}\n","position":{"x":228.08433420887945,"y":-163.8599737925354}},{"name":"Sighting","content":" \n\n/**\n * Details of a sighting of a type of animal by an individual spotter.\n * \n * @author David J. Barnes and Michael Kölling\n * @version 2016.02.29\n */\npublic class Sighting \n{\n    // The animal spotted.\n    private final String animal;\n    // The ID of the spotter.\n    private final int spotter;\n    // How many were seen.\n    private final int count;\n    // The ID of the area in which they were seen.\n    private final int area;\n    // The reporting period.\n    private final int period;\n    \n    /**\n     * Create a record of a sighting of a particular type of animal.\n     * @param animal The animal spotted.\n     * @param spotter The ID of the spotter.\n     * @param count How many were seen (>= 0).\n     * @param area The ID of the area in which they were seen.\n     * @param period The reporting period.\n     */\n    public Sighting(String animal, int spotter, int count, int area, int period)\n    {\n        this.animal = animal;\n        this.spotter = spotter;\n        this.count = count;\n        this.area = area;\n        this.period = period;\n    }\n\n    /**\n     * Return the type of animal spotted.\n     * @return The animal type.\n     */\n    public String getAnimal() \n    {\n        return animal;\n    }\n\n    /**\n     * Return the ID of the spotter.\n     * @return The spotter's ID.\n     */\n    public int getSpotter() \n    {\n        return spotter;\n    }\n\n    /**\n     * Return how many were spotted.\n     * @return The number seen.\n     */\n    public int getCount() \n    {\n        return count;\n    }\n\n    /**\n     * Return the ID of the area in which they were seen.\n     * @return Where they were seen.\n     */\n    public int getArea() \n    {\n        return area;\n    }\n\n    /**\n     * Return the period in which they were seen.\n     * @return When they were seen.\n     */\n    public int getPeriod() \n    {\n        return period;\n    }\n\n    /**\n     * Return a string containing details of the animal, the number seen,\n     * where they were seen, who spotted them and when.\n     * @return A string giving details of the sighting.\n     */\n    public String getDetails() \n    {\n        return animal + \n               \", count = \" + count + \n               \", area = \" + area + \n               \", spotter = \" + spotter + \n               \", period = \" + period;\n    }\n    \n}\n","position":{"x":442.0864101907901,"y":-63.70081133767647}},{"name":"AnimalMonitor","content":"import java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n/**\n * Monitor counts of different types of animal.\n * Sightings are recorded by spotters.\n * \n * @author David J. Barnes and Michael Kölling\n * @version 2016.03.01 (functional)\n */\npublic class AnimalMonitor\n{\n    private ArrayList<Sighting> sightings;\n    \n    /**\n     * Create an AnimalMonitor.\n     */\n    public AnimalMonitor()\n    {\n        this.sightings = new ArrayList<>();\n    }\n    \n    /**\n     * Add the sightings recorded in the given filename to the current list.\n     * @param filename A CSV file of Sighting records.\n     */\n    public void addSightings(String filename)\n    {\n        SightingReader reader = new SightingReader();\n        sightings.addAll(reader.getSightings(filename));\n    }\n    \n    /**\n     * Print details of all the sightings.\n     */\n    public void printList()\n    {\n        sightings.forEach(sighting -> System.out.println(sighting.getDetails()));\n    }\n    \n    /**\n     * Print details of all the sightings of the given animal.\n     * @param animal The type of animal.\n     */\n    public void printSightingsOf(String animal)\n    {\n        sightings.stream()\n                 .filter(sighting -> animal.equals(sighting.getAnimal()))\n                 .forEach(sighting -> System.out.println(sighting.getDetails()));        \n    }\n    \n    /**\n     * Print all the sightings by the given spotter.\n     * @param spotter The ID of the spotter.\n     */\n    public void printSightingsBy(int spotter)\n    {\n        sightings.stream()\n                 .filter(sighting -> sighting.getSpotter() == spotter)\n                 .map(sighting -> sighting.getDetails())\n                 .forEach(details -> System.out.println(details));        \n    }\n    \n    /**\n     * Return a count of the number of sightings of the given animal.\n     * @param animal The type of animal.\n     * @return The count of sightings of the given animal.\n     */\n    public int getCount(String animal)\n    {\n        return sightings.stream()\n                        .filter(sighting -> animal.equals(sighting.getAnimal()))\n                        .map(sighting -> sighting.getCount())\n                        .reduce(0, (runningSum, count) -> runningSum + count);\n    }\n}\n","position":{"x":54.09617700544567,"y":13.466400911236548}}],"files":[{"name":"sightings.csv","content":"# Fields: spotter,animal,count,area,period\n0,Mountain Gorilla,3,1,0\n0,Buffalo,10,1,0,\n0,Elephant,0,1,0\n1,Mountain Gorilla,1,2,0\n2,Mountain Gorilla,3,3,0\n3,Mountain Gorilla,0,2,0\n3,Buffalo,2,1,0\n3,Topi,25,1,0\n\n0,Mountain Gorilla,4,1,1\n0,Buffalo,16,1,1,\n1,Topi,20,1,1,\n3,Buffalo,0,2,1\n3,Topi,30,2,1\n\n0,Mountain Gorilla,1,1,2\n1,Mountain Gorilla,2,2,2\n2,Mountain Gorilla,0,3,2\n3,Topi,30,2,2\n3,Elephant,24,2,2\n"}]}