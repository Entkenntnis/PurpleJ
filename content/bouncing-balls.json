{"title":"Bouncing Balls","summary":"BlueJ Chapter 6","description":"`new BallDemo()`\n\n`bounce()`","lastUpdated":1728557186980,"output":"display","classes":[{"name":"Canvas","content":"import javax.swing.*;\nimport java.awt.*;\nimport java.awt.geom.*;\n\n/**\n * Class Canvas - a class to allow for simple graphical \n * drawing on a canvas.\n * \n * @author Michael KÃ¶lling (mik)\n * @author Bruce Quig\n *\n * @version 2016.02.29\n */\n\npublic class Canvas\n{\n    private JFrame frame;\n    private CanvasPane canvas;\n    private Graphics2D graphic;\n    private Color backgroundColor;\n    private Image canvasImage;\n\n    /**\n     * Create a Canvas with default height, width and background color \n     * (300, 300, white).\n     * @param title  title to appear in Canvas Frame     \n     */\n    public Canvas(String title)\n    {\n        this(title, 300, 300, Color.white);\n    }\n\n    /**\n     * Create a Canvas with default background color (white).\n     * @param title  title to appear in Canvas Frame\n     * @param width  the desired width for the canvas\n     * @param height  the desired height for the canvas\n     */\n    public Canvas(String title, int width, int height)\n    {\n        this(title, width, height, Color.white);\n    }\n\n    /**\n     * Create a Canvas.\n     * @param title  title to appear in Canvas Frame\n     * @param width  the desired width for the canvas\n     * @param height  the desired height for the canvas\n     * @param bgClour  the desired background color of the canvas\n     */\n    public Canvas(String title, int width, int height, Color bgColor)\n    {\n        frame = new JFrame();\n        canvas = new CanvasPane();\n        frame.setContentPane(canvas);\n        frame.setTitle(title);\n        canvas.setPreferredSize(new Dimension(width, height));\n        backgroundColor = bgColor;\n        frame.pack();\n        setVisible(true);\n    }\n\n    /**\n     * Set the canvas visibility and brings canvas to the front of screen\n     * when made visible. This method can also be used to bring an already\n     * visible canvas to the front of other windows.\n     * @param visible  boolean value representing the desired visibility of\n     * the canvas (true or false) \n     */\n    public void setVisible(boolean visible)\n    {\n        if(graphic == null) {\n            // first time: instantiate the offscreen image and fill it with\n            // the background color\n            Dimension size = canvas.getSize();\n            canvasImage = canvas.createImage(size.width, size.height);\n            graphic = (Graphics2D)canvasImage.getGraphics();\n            graphic.setColor(backgroundColor);\n            graphic.fillRect(0, 0, size.width, size.height);\n            graphic.setColor(Color.black);\n        }\n        frame.setVisible(true);\n    }\n\n    /**\n     * Provide information on visibility of the Canvas.\n     * @return  true if canvas is visible, false otherwise\n     */\n    public boolean isVisible()\n    {\n        return frame.isVisible();\n    }\n\n    /**\n     * Draw the outline of a given shape onto the canvas.\n     * @param  shape  the shape object to be drawn on the canvas\n     */\n    public void draw(Shape shape)\n    {\n        graphic.draw(shape);\n        canvas.repaint();\n    }\n \n    /**\n     * Fill the internal dimensions of a given shape with the current \n     * foreground color of the canvas.\n     * @param  shape  the shape object to be filled \n     */\n    public void fill(Shape shape)\n    {\n        graphic.fill(shape);\n        canvas.repaint();\n    }\n\n    /**\n     * Fill the internal dimensions of the given circle with the current \n     * foreground color of the canvas.\n     * @param  xPos  The x-coordinate of the circle center point\n     * @param  yPos  The y-coordinate of the circle center point\n     * @param  diameter  The diameter of the circle to be drawn\n     */\n    public void fillCircle(int xPos, int yPos, int diameter)\n    {\n        Ellipse2D.Double circle = new Ellipse2D.Double(xPos, yPos, diameter, diameter);\n        fill(circle);\n    }\n\n    /**\n     * Fill the internal dimensions of the given rectangle with the current \n     * foreground color of the canvas. This is a convenience method. A similar \n     * effect can be achieved with the \"fill\" method.\n     */\n    public void fillRectangle(int xPos, int yPos, int width, int height)\n    {\n        fill(new Rectangle(xPos, yPos, width, height));\n    }\n\n    /**\n     * Erase the whole canvas.\n     */\n    public void erase()\n    {\n        Color original = graphic.getColor();\n        graphic.setColor(backgroundColor);\n        Dimension size = canvas.getSize();\n        graphic.fill(new Rectangle(0, 0, size.width, size.height));\n        graphic.setColor(original);\n        canvas.repaint();\n    }\n\n    /**\n     * Erase the internal dimensions of the given circle. This is a \n     * convenience method. A similar effect can be achieved with\n     * the \"erase\" method.\n     */\n    public void eraseCircle(int xPos, int yPos, int diameter)\n    {\n        Ellipse2D.Double circle = new Ellipse2D.Double(xPos, yPos, diameter, diameter);\n        erase(circle);\n    }\n\n    /**\n     * Erase the internal dimensions of the given rectangle. This is a \n     * convenience method. A similar effect can be achieved with\n     * the \"erase\" method.\n     */\n    public void eraseRectangle(int xPos, int yPos, int width, int height)\n    {\n        erase(new Rectangle(xPos, yPos, width, height));\n    }\n\n    /**\n     * Erase a given shape's interior on the screen.\n     * @param  shape  the shape object to be erased \n     */\n    public void erase(Shape shape)\n    {\n        Color original = graphic.getColor();\n        graphic.setColor(backgroundColor);\n        graphic.fill(shape);              // erase by filling background color\n        graphic.setColor(original);\n        canvas.repaint();\n    }\n\n    /**\n     * Erases a given shape's outline on the screen.\n     * @param  shape  the shape object to be erased \n     */\n    public void eraseOutline(Shape shape)\n    {\n        Color original = graphic.getColor();\n        graphic.setColor(backgroundColor);\n        graphic.draw(shape);  // erase by drawing background color\n        graphic.setColor(original);\n        canvas.repaint();\n    }\n\n    /**\n     * Draws an image onto the canvas.\n     * @param  image   the Image object to be displayed \n     * @param  x       x co-ordinate for Image placement \n     * @param  y       y co-ordinate for Image placement \n     * @return  returns boolean value representing whether the image was \n     *          completely loaded \n     */\n    public boolean drawImage(Image image, int x, int y)\n    {\n        boolean result = graphic.drawImage(image, x, y, null);\n        canvas.repaint();\n        return result;\n    }\n\n    /**\n     * Draws a String on the Canvas.\n     * @param  text   the String to be displayed \n     * @param  x      x co-ordinate for text placement \n     * @param  y      y co-ordinate for text placement\n     */\n    public void drawString(String text, int x, int y)\n    {\n        graphic.drawString(text, x, y);   \n        canvas.repaint();\n    }\n\n    /**\n     * Erases a String on the Canvas.\n     * @param  text     the String to be displayed \n     * @param  x        x co-ordinate for text placement \n     * @param  y        y co-ordinate for text placement\n     */\n    public void eraseString(String text, int x, int y)\n    {\n        Color original = graphic.getColor();\n        graphic.setColor(backgroundColor);\n        graphic.drawString(text, x, y);   \n        graphic.setColor(original);\n        canvas.repaint();\n    }\n\n    /**\n     * Draws a line on the Canvas.\n     * @param  x1   x co-ordinate of start of line \n     * @param  y1   y co-ordinate of start of line \n     * @param  x2   x co-ordinate of end of line \n     * @param  y2   y co-ordinate of end of line \n     */\n    public void drawLine(int x1, int y1, int x2, int y2)\n    {\n        graphic.drawLine(x1, y1, x2, y2);   \n        canvas.repaint();\n    }\n\n    /**\n     * Sets the foreground color of the Canvas.\n     * @param  newColor   the new color for the foreground of the Canvas \n     */\n    public void setForegroundColor(Color newColor)\n    {\n        graphic.setColor(newColor);\n    }\n\n    /**\n     * Returns the current color of the foreground.\n     * @return   the color of the foreground of the Canvas \n     */\n    public Color getForegroundColor()\n    {\n        return graphic.getColor();\n    }\n\n    /**\n     * Sets the background color of the Canvas.\n     * @param  newColor   the new color for the background of the Canvas \n     */\n    public void setBackgroundColor(Color newColor)\n    {\n        backgroundColor = newColor;   \n        graphic.setBackground(newColor);\n    }\n\n    /**\n     * Returns the current color of the background\n     * @return   the color of the background of the Canvas \n     */\n    public Color getBackgroundColor()\n    {\n        return backgroundColor;\n    }\n\n    /**\n     * changes the current Font used on the Canvas\n     * @param  newFont   new font to be used for String output\n     */\n    public void setFont(Font newFont)\n    {\n        graphic.setFont(newFont);\n    }\n\n    /**\n     * Returns the current font of the canvas.\n     * @return     the font currently in use\n     **/\n    public Font getFont()\n    {\n        return graphic.getFont();\n    }\n\n    /**\n     * Sets the size of the canvas.\n     * @param  width    new width \n     * @param  height   new height \n     */\n    public void setSize(int width, int height)\n    {\n        canvas.setPreferredSize(new Dimension(width, height));\n        Image oldImage = canvasImage;\n        canvasImage = canvas.createImage(width, height);\n        graphic = (Graphics2D)canvasImage.getGraphics();\n        graphic.setColor(backgroundColor);\n        graphic.fillRect(0, 0, width, height);\n        graphic.drawImage(oldImage, 0, 0, null);\n        frame.pack();\n    }\n\n    /**\n     * Returns the size of the canvas.\n     * @return     The current dimension of the canvas\n     */\n    public Dimension getSize()\n    {\n        return canvas.getSize();\n    }\n\n    /**\n     * Waits for a specified number of milliseconds before finishing.\n     * This provides an easy way to specify a small delay which can be\n     * used when producing animations.\n     * @param  milliseconds  the number \n     */\n    public void wait(int milliseconds)\n    {\n        try\n        {\n            Thread.sleep(milliseconds);\n        } \n        catch (InterruptedException e)\n        {\n            // ignoring exception at the moment\n        }\n    }\n\n    /************************************************************************\n     * Inner class CanvasPane - the actual canvas component contained in the\n     * Canvas frame. This is essentially a JPanel with added capability to\n     * refresh the image drawn on it.\n     */\n    private class CanvasPane extends JPanel\n    {\n        public void paint(Graphics g)\n        {\n            g.drawImage(canvasImage, 0, 0, null);\n        }\n    }\n}\n","position":{"x":356.95236024048666,"y":124.10427830748412}},{"name":"BouncingBall","content":"import java.awt.*;\nimport java.awt.geom.*;\n\n/**\n * Class BouncingBall - a graphical ball that observes the effect of gravity. The ball\n * has the ability to move. Details of movement are determined by the ball itself. It\n * will fall downwards, accelerating with time due to the effect of gravity, and bounce\n * upward again when hitting the ground.\n *\n * This movement can be initiated by repeated calls to the \"move\" method.\n * \n * @author Michael KÃ¶lling (mik)\n * @author David J. Barnes\n * @author Bruce Quig\n *\n * @version 2016.02.29\n */\n\npublic class BouncingBall\n{\n    private static final int GRAVITY = 3;  // effect of gravity\n\n    private int ballDegradation = 2;\n    private Ellipse2D.Double circle;\n    private Color color;\n    private int diameter;\n    private int xPosition;\n    private int yPosition;\n    private final int groundPosition;      // y position of ground\n    private Canvas canvas;\n    private int ySpeed = 1;                // initial downward speed\n\n    /**\n     * Constructor for objects of class BouncingBall\n     *\n     * @param xPos  the horizontal coordinate of the ball\n     * @param yPos  the vertical coordinate of the ball\n     * @param ballDiameter  the diameter (in pixels) of the ball\n     * @param ballColor  the color of the ball\n     * @param groundPos  the position of the ground (where the wall will bounce)\n     * @param drawingCanvas  the canvas to draw this ball on\n     */\n    public BouncingBall(int xPos, int yPos, int ballDiameter, Color ballColor,\n                        int groundPos, Canvas drawingCanvas)\n    {\n        xPosition = xPos;\n        yPosition = yPos;\n        color = ballColor;\n        diameter = ballDiameter;\n        groundPosition = groundPos;\n        canvas = drawingCanvas;\n    }\n\n    /**\n     * Draw this ball at its current position onto the canvas.\n     **/\n    public void draw()\n    {\n        canvas.setForegroundColor(color);\n        canvas.fillCircle(xPosition, yPosition, diameter);\n    }\n\n    /**\n     * Erase this ball at its current position.\n     **/\n    public void erase()\n    {\n        canvas.eraseCircle(xPosition, yPosition, diameter);\n    }    \n\n    /**\n     * Move this ball according to its position and speed and redraw.\n     **/\n    public void move()\n    {\n        // remove from canvas at the current position\n        erase();\n            \n        // compute new position\n        ySpeed += GRAVITY;\n        yPosition += ySpeed;\n        xPosition +=2;\n\n        // check if it has hit the ground\n        if (yPosition >= (groundPosition - diameter) && ySpeed > 0) {\n            yPosition = (int)(groundPosition - diameter);\n            ySpeed = -ySpeed + ballDegradation; \n        }\n\n        // draw again at new position\n        draw();\n    }    \n\n    /**\n     * return the horizontal position of this ball\n     */\n    public int getXPosition()\n    {\n        return xPosition;\n    }\n\n    /**\n     * return the vertical position of this ball\n     */\n    public int getYPosition()\n    {\n        return yPosition;\n    }\n}\n","position":{"x":180.63785313443222,"y":-28.379842834535324}},{"name":"BallDemo","content":"import java.awt.Color;\n\n/**\n * Class BallDemo - a short demonstration showing animation with the \n * Canvas class. \n *\n * @author Michael KÃ¶lling and David J. Barnes\n * @version 2016.02.29\n */\n\npublic class BallDemo   \n{\n    private Canvas myCanvas;\n\n    /**\n     * Create a BallDemo object. Creates a fresh canvas and makes it visible.\n     */\n    public BallDemo()\n    {\n        myCanvas = new Canvas(\"Ball Demo\", 600, 500);\n    }\n\n    /**\n     * Simulate two bouncing balls\n     */\n    public void bounce()\n    {\n        int ground = 400;   // position of the ground line\n\n        myCanvas.setVisible(true);\n\n        // draw the ground\n        myCanvas.setForegroundColor(Color.BLACK);\n        myCanvas.drawLine(50, ground, 550, ground);\n\n        // create and show the balls\n        BouncingBall ball = new BouncingBall(50, 50, 16, Color.BLUE, ground, myCanvas);\n        ball.draw();\n        BouncingBall ball2 = new BouncingBall(70, 80, 20, Color.RED, ground, myCanvas);\n        ball2.draw();\n\n        // make them bounce\n        boolean finished =  false;\n        while (!finished) {\n            myCanvas.wait(50);           // small delay\n            ball.move();\n            ball2.move();\n            // stop once ball has travelled a certain distance on x axis\n            if(ball.getXPosition() >= 550 || ball2.getXPosition() >= 550) {\n                finished = true;\n            }\n        }\n    }\n}\n","position":{"x":-10.900140869616592,"y":131.756338512247}}]}