{"title":"BrickBreaker","summary":"Beispiel für ein Spiel","description":"Quelle: https://github.com/miazga-git/Java-swing-games/tree/main/BrickBreaker_Game\n\nStarte den interaktiven Modus und erstelle ein Objekt der Klasse `Main()`.\n\nStarte mit Enter, steuere mit den Pfeiltasten.","lastUpdated":1728382587619,"output":"display","classes":[{"name":"Main","content":"import java.awt.Color;\nimport javax.swing.JFrame;\n\npublic class Main {\n    public Main () {\n        JFrame frame = new JFrame();\n\n        BrickBreaker gameplay =new BrickBreaker();\n        frame.getContentPane().add(gameplay);\n        frame.setBounds(10,10,700,600);\n        frame.setTitle(\"Brick Breaker\");\n        frame.setResizable(false);\n        frame.setVisible(true);\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    }\n}","position":{"x":-57.235017816937734,"y":-1.2894622799996966}},{"name":"BrickBreaker","content":"import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.*;\n\npublic class BrickBreaker extends JPanel implements KeyListener, ActionListener {\n\n    private boolean movesRight=false;\n    private boolean movesLeft=false;\n\n    private boolean play=false;\n    private int score=0;\n\n    private int totalBricks=21;\n    private Timer timer;\n    private int delay=10;\n\n    private int playerX=310;//polozenie X paletki\n    private int ballposX=120;\n    private int ballposY=350;\n    private int ballXdir=-1;\n    private int ballYdir=-2;\n\n    private MapGenerator map;\n\n    private boolean goLow[]=new boolean[22];\n    private int brickGoingLowX[]=new int[22];\n    private int brickGoingLowY[]=new int[22];\n    private int goingLow[]=new int[22];\n    private int counter=0;\n\n\n    public BrickBreaker(){\n        for(int i=0;i<22;i++){\n            goingLow[i] = 1;\n            goLow[i] = false;\n        }\n        map=new MapGenerator(3,7);\n        addKeyListener(this);//podajemy jako arg obiekt klasy implementującej ActionListener\n        setFocusable(true);\n        setFocusTraversalKeysEnabled(false);\n        timer=new Timer(delay,this);\n        timer.start();\n    }\n\n    public void paint(Graphics g){\n        //background\n        g.setColor(Color.black);\n        g.fillRect(1,1,692,592);\n        //drawing map\n        map.draw((Graphics2D)g);//\n        //borders\n        g.setColor(Color.yellow);\n        g.fillRect(0,0,3,592);\n        g.fillRect(0,0,692,3);\n        g.fillRect(691,0,3,592);\n        //scores\n        g.setColor(Color.white);\n        g.setFont(new Font(\"serif\",Font.BOLD,25));\n        g.drawString(\" \"+score,590,30);\n        //the paddle\n        g.setColor(Color.green);\n        g.fillRect(playerX,550,100,8);\n\n        //the ball\n        g.setColor(Color.yellow);\n        g.fillOval(ballposX,ballposY,20,20);\n\n        for(int j=0;j<22;j++){\n            if(goLow[j]==true){\n                g.setColor(Color.white);\n                g.fillRect(brickGoingLowX[j],brickGoingLowY[j]+goingLow[j],map.brickWidth,map.brickHeight);\n\n            }\n        }\n\n\n        if(totalBricks<=0){\n            play=false;\n            ballXdir=0;\n            ballYdir=0;\n            g.setColor(Color.YELLOW);\n            g.setFont(new Font(\"serif\",Font.BOLD,30));\n            g.drawString(\"You Win! \",260,300);\n            g.setFont(new Font(\"serif\",Font.BOLD,20));\n            g.drawString(\"Press Enter to Restart \",230,350);\n        }\n        if(ballposY>570){\n            play=false;\n            ballXdir=0;\n            ballYdir=0;\n            g.setColor(Color.RED);\n            g.setFont(new Font(\"serif\",Font.BOLD,30));\n            g.drawString(\"Game Over , Scores: \"+score,190,300);\n            g.setFont(new Font(\"serif\",Font.BOLD,20));\n            g.drawString(\"Press Enter to Restart \",230,350);\n\n        }\n\n        g.dispose();\n    }\n\n    @Override\n    public void actionPerformed(ActionEvent e) {\n        timer.start();\n        if(play){\n            if(new Rectangle(ballposX,ballposY,20,20).intersects(new Rectangle(playerX,550,100,8))){\n                ballYdir=-ballYdir;\n                if(movesRight&&ballXdir<0){\n                    ballXdir=-ballXdir;\n                }\n                if(movesLeft&&ballXdir>0){\n                    ballXdir=-ballXdir;\n                }\n\n            }\n            A: for(int i=0;i<map.map.length;i++){\n                for(int j=0;j<map.map[0].length;j++){\n                    if(map.map[i][j]>0){\n                        int brickX=j*map.brickWidth+80;\n                        int brickY=i*map.brickHeight+50;\n                        int brickWidth=map.brickWidth;\n                        int brickHeight=map.brickHeight;\n\n                        Rectangle rect=new Rectangle(brickX,brickY,brickWidth,brickHeight);\n                        Rectangle ballRect=new Rectangle(ballposX,ballposY,20,20);\n                        Rectangle brickRect=rect;\n\n                        if(ballRect.intersects(brickRect)){\n                            map.setBrickValue(0,i,j);\n                            totalBricks--;\n                            score+=5;\n\n                            counter++;\n                            goLow[counter]=true;\n                            brickGoingLowY[counter]=brickY;\n                            brickGoingLowX[counter]=brickX;\n\n                            //counter++;\n\n                            if(ballposX+19<=brickRect.x||ballposX+1>=brickRect.x+brickRect.width){\n                                ballXdir=-ballXdir;\n                            }\n                            else{\n                                ballYdir=-ballYdir;\n                            }\n                            break A;\n                        }\n                    }\n                }\n            }\n\n\n\n            ballposX+=ballXdir;\n            ballposY+=ballYdir;\n            ballposX+=ballXdir;\n            ballposY+=ballYdir;\n            ballposX+=ballXdir;\n            ballposY+=ballYdir;\n            if(ballposX<0){\n                ballXdir=-ballXdir;\n            }\n            if(ballposY<0){\n                ballYdir=-ballYdir;\n            }\n            if(ballposX>670){\n                ballXdir=-ballXdir;\n            }\n            for(int j=0;j<22;j++){\n                if(goLow[j]==true){\n                    goingLow[j]++;\n                }\n            }\n            if(movesRight){\n\n                if(playerX<590)\n                    playerX+=6;\n\n                repaint();\n            }\n            if(movesLeft){\n\n                if(playerX>=10)\n                    playerX-=6;\n                repaint();\n            }\n\n        }\n\n        repaint();\n    }\n\n    @Override\n    public void keyTyped(KeyEvent e) {\n\n    }\n    @Override\n    public void keyReleased(KeyEvent e) {\n        if(e.getKeyCode()==KeyEvent.VK_RIGHT){\n            movesLeft=false;\n            movesRight=false;\n        }\n        if(e.getKeyCode()==KeyEvent.VK_LEFT){\n            movesLeft=false;\n            movesRight=false;\n        }\n\n    }\n\n    @Override\n    public void keyPressed(KeyEvent e) {\n        if(e.getKeyCode()==KeyEvent.VK_ENTER){\n            if(!play){\n                play=true;\n                ballposX=120;\n                ballposY=350;\n                ballXdir=-1;\n                ballYdir=-2;\n                playerX=310;\n                score=0;\n                totalBricks=21;\n                map=new MapGenerator(3,7);\n                repaint();\n                counter=0;\n                for(int i=0;i<22;i++){\n                    goingLow[i] = 1;\n                    goLow[i] = false;\n                }\n\n            }\n        }\n        if(e.getKeyCode()== MouseEvent.BUTTON3){\n\n        }\n        if(e.getKeyCode()== MouseEvent.BUTTON1){\n\n        }\n        if(e.getKeyCode()== MouseEvent.BUTTON2){\n\n        }\n        if(e.getKeyCode()==KeyEvent.VK_RIGHT){\n\n            play=true;\n\n            if(!movesLeft){\n\n                movesRight=true;\n            }\n            else{\n\n                movesRight=false;\n                movesLeft=true;\n            }\n        }\n        if(e.getKeyCode()==KeyEvent.VK_LEFT){\n            play=true;\n            if(!movesRight){\n\n                movesLeft=true;\n            }\n            else{\n\n                movesLeft=false;\n                movesRight=true;\n            }\n        }\n\n    }\n}\n\n\n\n","position":{"x":138.39619947430907,"y":48.23921175697538}},{"name":"MapGenerator","content":"\nimport java.awt.*;\n\npublic class MapGenerator {\n\n    public int map[][];\n    public int brickWidth;\n    public int brickHeight;\n    public MapGenerator(int row,int col){\n        map=new int[row][col];\n        for(int i=0;i<map.length;i++){\n            for(int j=0;j<map[0].length;j++){\n                map[i][j]=1;\n            }\n        }\n        brickWidth=540/col;\n        brickHeight=150/row;\n    }\n    public void draw(Graphics2D g){\n        for(int i=0;i<map.length;i++){\n            for(int j=0;j<map[0].length;j++){\n                if(map[i][j]>0){\n                    g.setColor(Color.white);\n                    g.fillRect(j*brickWidth+80,i*brickHeight+50,brickWidth,brickHeight);\n                    g.setStroke(new BasicStroke(3));//ustawiamy grubosc linii\n                    g.setColor(Color.black);\n                    g.drawRect(j*brickWidth+80,i*brickHeight+50,brickWidth,brickHeight);\n                }\n            }\n        }\n    }\n    public void setBrickValue(int value, int row, int col){\n        map[row][col]=value;\n    }\n}","position":{"x":111.12635286217213,"y":-131.36419038362897}}]}