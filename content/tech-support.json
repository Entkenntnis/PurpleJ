{"title":"Tech support","summary":"BlueJ Chapter 6","description":"`new SupportSystem()`\n\n`start()`","lastUpdated":1728597088124,"output":"terminal","classes":[{"name":"InputReader","content":"import java.util.HashSet;\nimport java.util.Scanner;\n\n/**\n * InputReader reads typed text input from the standard text terminal. \n * The text typed by a user is then chopped into words, and a set of words \n * is provided.\n * \n * @author     Michael Kölling and David J. Barnes\n * @version    1.0 (2016.02.29)\n */\npublic class InputReader\n{\n    private Scanner reader;\n\n    /**\n     * Create a new InputReader that reads text from the text terminal.\n     */\n    public InputReader()\n    {\n        reader = new Scanner(System.in);\n    }\n\n    /**\n     * Read a line of text from standard input (the text terminal),\n     * and return it as a set of words.\n     *\n     * @return  A set of Strings, where each String is one of the \n     *          words typed by the user\n     */\n    public HashSet<String> getInput() \n    {\n        System.out.print(\"> \");                // print prompt\n        String inputLine = reader.nextLine().trim().toLowerCase();\n\n        String[] wordArray = inputLine.split(\" \");  // split at spaces\n\n        // add words from array into hashset \n        HashSet<String> words = new HashSet<>();\n        for(String word : wordArray) {\n            words.add(word);\n        }\n        return words;\n    }\n}\n","position":{"x":282.10302211603675,"y":-61.36787182479853}},{"name":"Responder","content":"import java.util.HashMap;\nimport java.util.HashSet;\nimport java.util.ArrayList;\nimport java.util.Iterator;\nimport java.util.Random;\n\n/**\n * The responder class represents a response generator object.\n * It is used to generate an automatic response, based on specified input.\n * Input is presented to the responder as a set of words, and based on those\n * words the responder will generate a String that represents the response.\n *\n * Internally, the reponder uses a HashMap to associate words with response\n * strings and a list of default responses. If any of the input words is found\n * in the HashMap, the corresponding response is returned. If none of the input\n * words is recognized, one of the default responses is randomly chosen.\n * \n * @author     Michael Kölling and David J. Barnes\n * @version    1.0 (2016.02.29)\n */\npublic class Responder\n{\n    // Used to map key words to responses.\n    \n    private HashMap<String, String> responseMap;\n    // Default responses to use if we don't recognise a word.\n    private ArrayList<String> defaultResponses;\n    private Random randomGenerator;\n\n    /**\n     * Construct a Responder\n     */\n    public Responder()\n    {\n        responseMap = new HashMap<>();\n        defaultResponses = new ArrayList<>();\n        fillResponseMap();\n        fillDefaultResponses();\n        randomGenerator = new Random();\n    }\n\n    \n    public String generateResponse(HashSet<String> words)\n    {\n        for (String word : words) {\n            String response = responseMap.get(word);\n            if(response != null) {\n                return response;\n            }\n        }\n        \n        // If we get here, none of the words from the input line was recognized.\n        // In this case we pick one of our default responses (what we say when\n        // we cannot think of anything else to say...)\n        return pickDefaultResponse();\n    }\n\n    /**\n     * Enter all the known keywords and their associated responses\n     * into our response map.\n     */\n    private void fillResponseMap()\n    {\n        responseMap.put(\"crash\", \n                        \"Well, it never crashes on our system. It must have something\\n\" +\n                        \"to do with your system. Tell me more about your configuration.\");\n        responseMap.put(\"crashes\", \n                        \"Well, it never crashes on our system. It must have something\\n\" +\n                        \"to do with your system. Tell me more about your configuration.\");\n        responseMap.put(\"slow\", \n                        \"I think this has to do with your hardware. Upgrading your processor\\n\" +\n                        \"should solve all performance problems. Have you got a problem with\\n\" +\n                        \"our software?\");\n        responseMap.put(\"performance\", \n                        \"Performance was quite adequate in all our tests. Are you running\\n\" +\n                        \"any other processes in the background?\");\n        responseMap.put(\"bug\", \n                        \"Well, you know, all software has some bugs. But our software engineers\\n\" +\n                        \"are working very hard to fix them. Can you describe the problem a bit\\n\" +\n                        \"further?\");\n        responseMap.put(\"buggy\", \n                        \"Well, you know, all software has some bugs. But our software engineers\\n\" +\n                        \"are working very hard to fix them. Can you describe the problem a bit\\n\" +\n                        \"further?\");\n        responseMap.put(\"windows\", \n                        \"This is a known bug to do with the Windows operating system. Please\\n\" +\n                        \"report it to Microsoft. There is nothing we can do about this.\");\n        responseMap.put(\"mac\", \n                        \"This is a known bug to do with the Mac operating system. Please\\n\" +\n                        \"report it to Apple. There is nothing we can do about this.\");\n        responseMap.put(\"expensive\", \n                        \"The cost of our product is quite competitive. Have you looked around\\n\" +\n                        \"and really compared our features?\");\n        responseMap.put(\"installation\", \n                        \"The installation is really quite straight forward. We have tons of\\n\" +\n                        \"wizards that do all the work for you. Have you read the installation\\n\" +\n                        \"instructions?\");\n        responseMap.put(\"memory\", \n                        \"If you read the system requirements carefully, you will see that the\\n\" +\n                        \"specified memory requirements are 1.5 giga byte. You really should\\n\" +\n                        \"upgrade your memory. Anything else you want to know?\");\n        responseMap.put(\"linux\", \n                        \"We take Linux support very seriously. But there are some problems.\\n\" +\n                        \"Most have to do with incompatible glibc versions. Can you be a bit\\n\" +\n                        \"more precise?\");\n        responseMap.put(\"bluej\", \n                        \"Ahhh, BlueJ, yes. We tried to buy out those guys long ago, but\\n\" +\n                        \"they simply won't sell... Stubborn people they are. Nothing we can\\n\" +\n                        \"do about it, I'm afraid.\");\n    }\n\n    /**\n     * Build up a list of default responses from which we can pick one\n     * if we don't know what else to say.\n     */\n    private void fillDefaultResponses()\n    {\n        defaultResponses.add(\"That sounds odd. Could you describe that problem in more detail?\");\n        defaultResponses.add(\"No other customer has ever complained about this before. \\n\" +\n                             \"What is your system configuration?\");\n        defaultResponses.add(\"That sounds interesting. Tell me more...\");\n        defaultResponses.add(\"I need a bit more information on that.\");\n        defaultResponses.add(\"Have you checked that you do not have a dll conflict?\");\n        defaultResponses.add(\"That is explained in the manual. Have you read the manual?\");\n        defaultResponses.add(\"Your description is a bit wishy-washy. Have you got an expert\\n\" +\n                             \"there with you who could describe this more precisely?\");\n        defaultResponses.add(\"That's not a bug, it's a feature!\");\n        defaultResponses.add(\"Could you elaborate on that?\");\n    }\n\n    /**\n     * Randomly select and return one of the default responses.\n     * @return     A random default response\n     */\n    private String pickDefaultResponse()\n    {\n        // Pick a random number for the index in the default response list.\n        // The number will be between 0 (inclusive) and the size of the list (exclusive).\n        int index = randomGenerator.nextInt(defaultResponses.size());\n        return defaultResponses.get(index);\n    }\n}\n","position":{"x":282.0106530603571,"y":76.498184214768}},{"name":"SupportSystem","content":"import java.util.HashSet;\n\n/**\n * This class implements a technical support system. It is the top level class \n * in this project. The support system communicates via text input/output \n * in the text terminal.\n * \n * This class uses an object of class InputReader to read input from the user,\n * and an object of class Responder to generate responses. It contains a loop\n * that repeatedly reads input and generates output until the users wants to \n * leave.\n * \n * @author     Michael Kölling and David J. Barnes\n * @version    1.0 (2016.02.29)\n */\npublic class SupportSystem\n{\n    private InputReader reader;\n    private Responder responder;\n    \n    /**\n     * Creates a technical support system.\n     */\n    public SupportSystem()\n    {\n        reader = new InputReader();\n        responder = new Responder();\n    }\n\n    \n    public void start()\n    {\n        boolean finished = false;\n\n        printWelcome();\n\n        while(!finished) {\n            HashSet<String> input = reader.getInput();\n\n            if(input.contains(\"bye\")) {\n                finished = true;\n            }\n            else {\n                String response = responder.generateResponse(input);\n                System.out.println(response);\n            }\n        }\n        printGoodbye();\n    }\n\n    /**\n     * Print a welcome message to the screen.\n     */\n    private void printWelcome()\n    {\n        System.out.println(\"Welcome to the DodgySoft Technical Support System.\");\n        System.out.println();\n        System.out.println(\"Please tell us about your problem.\");\n        System.out.println(\"We will assist you with any problem you might have.\");\n        System.out.println(\"Please type 'bye' to exit our system.\");\n    }\n\n    /**\n     * Print a good-bye message to the screen.\n     */\n    private void printGoodbye()\n    {\n        System.out.println(\"Nice talking to you. Bye...\");\n    }\n}\n","position":{"x":67.1285305249684,"y":30.393367636939985}}]}