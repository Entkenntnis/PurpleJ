{
  "title": "Minesweeper",
  "summary": "Nostalgie pur - leichter Modus",
  "description": "Quelle: https://github.com/miazga-git/Java-swing-games/tree/main/Minesweeper_Game\n\nErstelle ein neues Objekt der Klasse `new Main()`, um da Spiel zu starten.",
  "lastUpdated": 1728462914016,
  "output": "display",
  "classes": [
    {
      "name": "PlayingFields",
      "content": "\npublic class PlayingFields {\n    int coordinateX; //wspolrzedna X danego pola\n    int coordinateY; //wspolrzedna Y danego pola\n    boolean isBomb; //zmienna ktora mowi nam o tym czy pod danym polem ukryta jest bomba\n    boolean isFlag; //zmienna ktora mowi nam o tym czy dane pole oznaczylem flagą ==Czy kliknąłem na pole PPM\n    boolean isDiscovered; //zmienna ktora mowi nam o tym czy pole zostało kliknięte LPM\n    int number;//tu bede przechowywal liczby ktore beda sie wyswietlac w polach\n\n    public PlayingFields(){\n        coordinateX=0;\n        coordinateY=0;\n        isBomb=false;\n        isFlag=false;\n        isDiscovered=false;\n    }\n}",
      "position": { "x": 213.60368744229098, "y": -81.26534278436912 }
    },
    {
      "name": "Minesweeper",
      "content": "import javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.awt.event.MouseEvent;\nimport java.awt.event.MouseListener;\nimport java.util.Random;\n\n\npublic class Minesweeper extends JPanel implements MouseListener, ActionListener {\n    private Timer timer;\n    private int delay = 6;\n\n    private PlayingFields[][] tab = new PlayingFields[20][20];//tablica obiektów czyli pól\n\n\n    private ImageIcon bomb;\n    private ImageIcon flag;\n    private ImageIcon happyhead;\n    private ImageIcon sadhead;\n    private ImageIcon panel;\n    private ImageIcon chillhead;\n\n    private boolean defeat=false;\n    private boolean win=false;\n    private int numberOfCorrectlySelectedBombs=0;\n\n    private int plus = 0;\n    private int numberOfFlags;\n\n    private int[] rectxpos = {13, 38, 63, 88, 113, 138, 163, 188, 213, 238, 263, 288, 313, 338, 363, 388, 413,\n            438, 463, 488};\n\n    private int[] rectypos = {153, 178, 203, 228, 253, 278, 303, 328, 353, 378, 403, 428, 453, 478\n            , 503, 528, 553, 578, 603, 628};\n\n    private int numberofbombs = 25;\n\n    private Random random = new Random();\n    private int xpos;\n    private int ypos;\n\n\n    public Minesweeper() {\n\n        numberOfFlags=numberofbombs;\n\n        for (int i = 0; i < 20; i++) {\n            for (int j = 0; j < 20; j++) {\n                tab[i][j] = new PlayingFields();\n            }\n        }\n        addMouseListener(this);//podajemy jako arg obiekt klasy implementującej ActionListener\n        setFocusable(true);\n        setFocusTraversalKeysEnabled(false);\n        timer = new Timer(delay, this);\n        timer.start();\n\n        tab[1][2].coordinateY = 1;\n\n        int licznikX = 10;\n        int licznikY;\n        for (int i = 0; i < 20; i++) {\n            licznikY = 150;\n            for (int j = 0; j < 20; j++) {\n                tab[i][j].coordinateY = licznikY;\n                tab[i][j].coordinateX = licznikX;\n                licznikY += 25;\n            }\n            licznikX += 25;\n\n        }\n\n        //ustawianie bomb\n        for (int i = 0; i < numberofbombs; i++) {\n            xpos = random.nextInt(20);\n            ypos = random.nextInt(20);\n            if (tab[xpos][ypos].isBomb == false) {\n                tab[xpos][ypos].isBomb = true;\n            } else {\n                i--;\n            }\n\n        }\n        zliczanieBomb(tab);\n    }\n\n    public void zliczanieBomb(PlayingFields[][] tab1) {\n        int licznik = 0;\n        for (int i = 0; i < 20; i++) {\n            for (int j = 0; j < 20; j++) {\n\n                if (i - 1 >= 0 && j - 1 >= 0 && tab[i - 1][j - 1].isBomb == true) {\n                    licznik++;\n                }\n                if (i - 1 >= 0 && tab[i - 1][j].isBomb == true) {\n                    licznik++;\n                }\n                if (i - 1 >= 0 && j + 1 < 20 && tab[i - 1][j + 1].isBomb == true) {\n                    licznik++;\n                }\n                if (j - 1 >= 0 && tab[i][j - 1].isBomb == true) {\n                    licznik++;\n                }\n                if (j + 1 < 20 && tab[i][j + 1].isBomb == true) {\n                    licznik++;\n                }\n                if (i + 1 < 20 && j - 1 >= 0 && tab[i + 1][j - 1].isBomb == true) {\n                    licznik++;\n                }\n                if (i + 1 < 20 && tab[i + 1][j].isBomb == true) {\n                    licznik++;\n                }\n                if (i + 1 < 20 && j + 1 < 20 && tab[i + 1][j + 1].isBomb == true) {\n                    licznik++;\n                }\n                tab[i][j].number = licznik;\n                licznik = 0;\n            }\n        }\n    }\n    public void odslanianiePrzestrzenii(int i,int j){\n\n        //dla tab[i][j].number>0 nie wywolujemy tej funkcji znowu\n        //dla tab[i][j].number==0 wywolujemy funkcje przekazując do niej\n        if (tab[i][j].isDiscovered == true&&tab[i][j].isBomb==false) {\n\n            if (i - 1 >= 0 && j - 1 >= 0 &&tab[i-1][j-1].isBomb==false&&tab[i-1][j-1].isDiscovered==false) {// tab[i - 1][j - 1].number == 0&&\n                tab[i - 1][j - 1].isDiscovered = true;\n                if(tab[i-1][j-1].number==0)\n                    odslanianiePrzestrzenii(i-1,j-1);\n            }\n            if (i - 1 >= 0 && tab[i-1][j].isBomb==false&&tab[i-1][j].isDiscovered==false) {//tab[i - 1][j].number == 0&&\n\n                tab[i - 1][j].isDiscovered = true;\n                if(tab[i-1][j].number==0)\n                    odslanianiePrzestrzenii(i-1,j);\n\n            }\n            if (i - 1 >= 0 && j + 1 < 20&&tab[i-1][j+1].isBomb==false&&tab[i-1][j+1].isDiscovered==false) {// && tab[i - 1][j + 1].number == 0\n                tab[i - 1][j + 1].isDiscovered = true;\n                if(tab[i-1][j+1].number==0)\n                    odslanianiePrzestrzenii(i-1,j+1);\n            }\n            if (j - 1 >= 0 && tab[i][j-1].isBomb==false&&tab[i][j-1].isDiscovered==false) {//tab[i][j - 1].number == 0&&\n                tab[i][j - 1].isDiscovered = true;\n                if(tab[i][j-1].number==0)\n                    odslanianiePrzestrzenii(i,j-1);\n            }\n            if (j + 1 < 20 && tab[i][j+1].isBomb==false&&tab[i][j+1].isDiscovered==false) {//tab[i][j + 1].number == 0&&\n                tab[i][j + 1].isDiscovered = true;\n                if(tab[i][j+1].number==0)\n                    odslanianiePrzestrzenii(i,j+1);\n            }\n            if (i + 1 < 20 && j - 1 >= 0 &&tab[i+1][j-1].isBomb==false&&tab[i+1][j-1].isDiscovered==false) {//&& tab[i + 1][j - 1].number == 0\n                tab[i + 1][j - 1].isDiscovered = true;\n                if(tab[i+1][j-1].number==0)\n                    odslanianiePrzestrzenii(i+1,j-1);\n            }\n            if (i + 1 < 20 && tab[i+1][j].isBomb==false&&tab[i+1][j].isDiscovered==false) {//tab[i + 1][j].number == 0&&\n                tab[i + 1][j].isDiscovered = true;\n                if(tab[i+1][j].number==0)\n                    odslanianiePrzestrzenii(i+1,j);\n            }\n            if (i + 1 < 20 && j + 1 < 20 && tab[i+1][j+1].isBomb==false&&tab[i+1][j+1].isDiscovered==false) {//tab[i + 1][j + 1].number == 0&&\n                tab[i + 1][j + 1].isDiscovered = true;\n                if(tab[i+1][j+1].number==0)\n                    odslanianiePrzestrzenii(i+1,j+1);\n            }\n\n\n        }\n        repaint();\n\n    }\n\n\n    public void paint(Graphics g) {\n\n        bomb = new ImageIcon(\"/app/tmp_assets/bomb.png\");//20x22pix\n\n        flag = new ImageIcon(\"/app/tmp_assets/flag.png\");//20x22pix\n        panel = new ImageIcon(\"/app/tmp_assets/panel.png\");//24x24pix\n        sadhead = new ImageIcon(\"/app/tmp_assets/sadhead.png\");//24x24pix\n        happyhead = new ImageIcon(\"/app/tmp_assets/happyhead.png\");//24x24pix\n        chillhead = new ImageIcon(\"/app/tmp_assets/chillhead.png\");//24x24pix\n\n\n\n\n        // flag.paintIcon(this,g,38,178);//35+3/10+3\n\n        //Color o=new Color(190,190,190);\n        // g.setColor(o);\n        g.setColor(Color.LIGHT_GRAY);\n        g.fillRect(1, 1, 692, 692);\n\n        if(!defeat&&win==false){\n            happyhead.paintIcon(this, g,235,90);\n        }\n        if(defeat){\n            sadhead.paintIcon(this, g,235,90);\n        }\n        if(win){\n            chillhead.paintIcon(this, g,235,90);\n        }\n\n        // g.setColor(Color.RED);\n        // g.setFont(new Font(\"Consolas\",Font.PLAIN,50));\n\n        g.setColor(Color.BLACK);\n\n        for (int i = 0; i < 22; i++) {\n            g.drawLine(10, 150 + plus, 510, 150 + plus);\n            g.drawLine(10 + plus, 150, 10 + plus, 650);\n            plus += 25;\n        }\n        plus = 0;\n        //rysowanie gornegopanelu\n        for (int i = 0; i < 20; i++) {\n            for (int j = 0; j < 20; j++) {\n                if (tab[i][j].isDiscovered == false) {\n                    panel.paintIcon(this, g, tab[i][j].coordinateX+1 , tab[i][j].coordinateY+1);\n                }\n            }\n        }\n\n        //rysowanie ilosci flag\n        g.setColor(Color.RED);\n        g.setFont(new Font(\"Consolas\",Font.PLAIN,50));\n        g.drawString(String.valueOf(numberOfFlags),40,140);//y125\n\n\n        //rysowanie flag\n        for (int i = 0; i < 20; i++) {\n            for (int j = 0; j < 20; j++) {\n                if (tab[i][j].isFlag == true) {\n                    flag.paintIcon(this, g, tab[i][j].coordinateX + 3, tab[i][j].coordinateY + 3);\n                }\n            }\n        }\n\n        //rysowanie bomb\n        for (int i = 0; i < 20; i++) {\n            for (int j = 0; j < 20; j++) {\n                if (defeat&&tab[i][j].isBomb == true) {//tab[i][j].isBomb == true && tab[i][j].isDiscovered == true\n                    bomb.paintIcon(this, g, tab[i][j].coordinateX + 3, tab[i][j].coordinateY + 3);\n                }\n            }\n        }\n        g.setColor(Color.BLUE);\n\n\n        //rysowanie numerkow\n        g.setFont(new Font(\"serif\", Font.BOLD, 23));\n        for (int i = 0; i < 20; i++) {\n            for (int j = 0; j < 20; j++) {\n                if (tab[i][j].number > 0 && tab[i][j].isBomb == false && tab[i][j].isDiscovered == true) {\n                    if(tab[i][j].number==1){\n                        g.setColor(Color.BLUE);\n                    }\n                    if(tab[i][j].number==2){\n                        g.setColor(new Color(0,100,0));\n                    }\n                    if(tab[i][j].number==3){\n                        g.setColor(Color.RED);\n                    }\n                    if(tab[i][j].number==4){\n                        g.setColor(new Color(0,0,100));\n                    }\n                    if(tab[i][j].number==5){\n                        g.setColor(new Color(100,0,0));\n                    }\n                    if(tab[i][j].number==6){\n                        g.setColor(new Color(0,120,100));\n                    }\n                    g.drawString(\"\" + tab[i][j].number, tab[i][j].coordinateX + 9, tab[i][j].coordinateY + 20);\n                }\n            }\n        }\n\n\n    }\n\n    @Override\n    public void actionPerformed(ActionEvent e) {\n\n    }\n\n    @Override\n    public void mouseClicked(MouseEvent e) {\n        if (e.getButton() == MouseEvent.BUTTON3) {//Prawy Przycisk Myszki\n            for(int i=0;i<20;i++){\n                for(int j=0;j<20;j++){\n                    if(tab[i][j].coordinateX<=e.getX()&&e.getX()<=tab[i][j].coordinateX+24){\n                        if(tab[i][j].coordinateY<=e.getY()&&e.getY()<=tab[i][j].coordinateY+24) {\n                            if(tab[i][j].isFlag ==false&&numberOfFlags>0){\n                                tab[i][j].isFlag = true;\n                                if(tab[i][j].isBomb==true&&tab[i][j].isFlag==true){\n                                    numberOfCorrectlySelectedBombs++;\n                                }\n                                numberOfFlags--;\n\n                            }\n                            else if(tab[i][j].isFlag ==true){\n                                tab[i][j].isFlag = false;\n                                numberOfFlags++;\n                                if(tab[i][j].isBomb==true&&tab[i][j].isFlag==false){\n                                    numberOfCorrectlySelectedBombs--;\n                                }\n                            }\n\n                        }\n                    }\n                }\n            }\n            repaint();\n        }\n\n        if (e.getButton() == MouseEvent.BUTTON1) {//Lewy Przycisk Myszki\n            System.out.println(\"Mouse clicked.Your such a good programmer! x = \" + e.getX() + \" ,y = \" + e.getY());\n            for(int i=0;i<20;i++){\n                for(int j=0;j<20;j++){\n                    if(tab[i][j].coordinateX<=e.getX()&&e.getX()<=tab[i][j].coordinateX+24){\n                        if(tab[i][j].coordinateY<=e.getY()&&e.getY()<=tab[i][j].coordinateY+24) {\n                            tab[i][j].isDiscovered = true;\n                            if(tab[i][j].isBomb == true)\n                                defeat=true;\n\n                            //odsłanianie wolnych przestrzenii\n                            //dla tab[i][j].number>0 nie wywolujemy tej funkcji znowu\n                            //dla tab[i][j].number==0 wywolujemy funkcje przekazując do niej\n\n                            odslanianiePrzestrzenii(i,j);\n\n\n                        }\n                    }\n                }\n            }\n\n            if(235<=e.getX()&&e.getX()<=285){\n\n                if(90<=e.getY()&&e.getY()<=140){\n\n                    numberOfCorrectlySelectedBombs=0;\n                    numberOfFlags=numberofbombs;\n                    for(int i=0;i<20;i++){\n                        for(int j=0;j<20;j++){\n                            tab[i][j].isFlag=false;\n                            tab[i][j].isBomb=false;\n                            tab[i][j].isDiscovered=false;\n                            tab[i][j].number=0;\n                            defeat=false;\n                            win=false;\n\n\n                        }\n                    }\n                    for (int i = 0; i < numberofbombs; i++) {\n                        xpos = random.nextInt(20);\n                        ypos = random.nextInt(20);\n                        if (tab[xpos][ypos].isBomb == false) {\n                            tab[xpos][ypos].isBomb = true;\n                        } else {\n                            i--;\n                        }\n\n                    }\n                    zliczanieBomb(tab);\n                    repaint();\n                }\n            }\n\n            repaint();\n\n\n\n        }\n\n        if(numberOfCorrectlySelectedBombs==numberofbombs){\n            win=true;\n        }\n\n\n\n\n\n    }\n\n    @Override\n    public void mousePressed(MouseEvent e) {\n\n    }\n\n    @Override\n    public void mouseReleased(MouseEvent e) {\n\n    }\n\n    @Override\n    public void mouseEntered(MouseEvent e) {\n\n    }\n\n    @Override\n    public void mouseExited(MouseEvent e) {\n\n    }\n}",
      "position": { "x": 32.49968907979337, "y": -4.360091912135601 }
    },
    {
      "name": "Main",
      "content": "\nimport javax.swing.*;\nimport java.awt.*;\n\npublic class Main {\n    public Main(){\n        JFrame obj = new JFrame();\n        Minesweeper gameplay = new Minesweeper();\n        obj.getContentPane().add(gameplay);\n\n        obj.setBounds(190,140,530,700);\n        obj.setResizable(false);\n        obj.setVisible(true);\n        obj.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n    }\n}",
      "position": { "x": -182.61344390059253, "y": 32.263042021205905 }
    }
  ]
}
