{"title":"Automaton","summary":"BlueJ Chapter 7","description":"`new AutomatonController()`\n\n`run(1000)`","lastUpdated":1728737552829,"output":"terminal","classes":[{"name":"Automaton","content":"import java.util.*;\n\n/**\n * Model a 1D elementary cellular automaton.\n * \n * @author David J. Barnes and Michael Kölling\n * @version  2016.02.29 - version 4\n */\npublic class Automaton\n{\n    // The number of cells.\n    private final int numberOfCells;\n    // The state of the cells.\n    private int[] state;\n    // The state table encoding the next-state changes.\n    private int[] stateTable;\n    \n    /**\n     * Create a 1D automaton consisting of the given number of cells.\n     * @param numberOfCells The number of cells in the automaton.\n     */\n    public Automaton(int numberOfCells)\n    {\n        this.numberOfCells = numberOfCells;\n        // Allow an extra element to avoid 'fencepost' errors.\n        state = new int[numberOfCells + 1];\n        stateTable = new int[] {\n            0, 1, 0, 0, 1, 0, 0, 1, // Wolfram code 146\n        };\n        // Seed the automaton with a single 'on' cell.\n        state[numberOfCells / 2] = 1;\n    }\n    \n    /**\n     * Print the current state of the automaton.\n     */\n    public void print()\n    {\n        for(int cellValue : state) {\n            System.out.print(cellValue == 1 ? \"*\" : \" \");\n        }\n        System.out.println();\n    }   \n    \n    /**\n     * Update the automaton to its next state.\n     */\n    public void update()\n    {\n        // Build the new state in a separate array.\n        int[] nextState = new int[state.length];\n        // Use 0 for the non-existent value to the left of\n        // the first cell.\n        int left = 0;\n        int center = state[0];\n        for(int i = 0; i < numberOfCells; i++) {\n            int right = state[i + 1];\n            nextState[i] = calculateNextState(left, center, right);\n            left = center;\n            center = right;\n        }\n        state = nextState;\n    }\n    \n    /**\n     * Reset the automaton.\n     */\n    public void reset()\n    {\n        Arrays.fill(state, 0);\n        // Seed the automaton with a single 'on' cell in the middle.\n        state[numberOfCells / 2] = 1;\n    }\n\n    /**\n     * Calculate the next state of the center cell\n     * given current left, center and right cell\n     * values.\n     * This implements Wolfram code 110.\n     * @see https://en.wikipedia.org/wiki/Wolfram_code\n     * @param left The state of the cell to the left of center.\n     * @param center The state of the center cell.\n     * @param right The state of the cell to the right of center.\n     * @return The new value of center (0 or 1).\n     */\n    private int calculateNextState(int left, int center, int right)\n    {\n        return stateTable[encodeTriplet(left, center, right)];\n    }\n    \n    /**\n     * Encode the 1/0 triplet (left, center, right) as an\n     * integer value in the range 0-7.\n     * @param left The state of the cell to the left of center (0 or 1).\n     * @param center The state of the center cell (0 or 1).\n     * @param right The state of the cell to the right of center (0 or 1).\n     * @return (left,center,right) interpreted as a 3-bit value.\n     */\n    private int encodeTriplet(int left, int center, int right)\n    {\n        return left * 4 + center * 2 + right;\n    }\n\n}\n","position":{"x":218.65393888028422,"y":66.2247763594793}},{"name":"AutomatonController","content":"/**\n * Set up and control an elementary cellular automaton.\n * \n * @author David J. Barnes and Michael Kölling\n * @version  2016.02.29\n */\npublic class AutomatonController\n{\n    // The automaton.\n    private Automaton auto;\n    \n    /**\n     * Create an AutomatonController.\n     * @param numberOfCells The number of cells in the automaton.\n     */\n    public AutomatonController(int numberOfCells)\n    {\n        auto = new Automaton(numberOfCells);\n        auto.print();\n    }\n    \n    /**\n     * Create an AutomatonController with\n     * a default number of cells.\n     */\n    public AutomatonController()\n    {\n        this(50);\n    }\n    \n    /**\n     * Run the automaton for the given number of steps.\n     * @param numSteps The number of steps.\n     */\n    public void run(int numSteps)\n    {\n        for(int step = 1; step <= numSteps; step++) {\n            step();\n        }\n    }\n    \n    /**\n     * Run the automaton for a single step.\n     */\n    public void step()\n    {\n        auto.update();\n        auto.print();\n    }\n    \n    /**\n     * Reset the automaton.\n     */\n    public void reset()\n    {\n        auto.reset();\n        auto.print();\n    }\n}\n","position":{"x":35.34227627358513,"y":91.20373247119741}}]}